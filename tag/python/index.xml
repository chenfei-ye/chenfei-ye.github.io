<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python | Chenfei Ye</title>
    <link>https://chenfei-ye.github.io/tag/python/</link>
      <atom:link href="https://chenfei-ye.github.io/tag/python/index.xml" rel="self" type="application/rss+xml" />
    <description>python</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://chenfei-ye.github.io/media/icon_hu80a2544e7b046e76dea23103488b26f7_18404_512x512_fill_lanczos_center_3.png</url>
      <title>python</title>
      <link>https://chenfei-ye.github.io/tag/python/</link>
    </image>
    
    <item>
      <title>python进程传参踩坑：为何单变量参数被识别为多变量</title>
      <link>https://chenfei-ye.github.io/post/202206_python_tuple/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/post/202206_python_tuple/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景：&lt;/h3&gt;
&lt;p&gt;新建一个脚本进程，需要如下传参：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fastcsr_input = [&amp;#39;--t1&amp;#39;,input_nu_image, &amp;#39;--L4&amp;#39;, t1_label_L4]
p_fastcsr = multiprocessing.Process(target=FastCSR_pipeline.main, args=(fastcsr_input))
p_fastcsr.start()
p_fastcsr.join()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;脚本&lt;code&gt;FastCSR_pipeline.main&lt;/code&gt;函数只接受一个输入变量，但运行时报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python TypeError: write() takes exactly 1 argument (but 4 were given)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;方案&#34;&gt;方案：&lt;/h3&gt;
&lt;p&gt;折腾半天找到&lt;a href=&#34;https://stackoverflow.com/questions/1559125/string-arguments-in-python-multiprocessing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原因&lt;/a&gt;，&lt;code&gt;multiprocessing.Process&lt;/code&gt;中&lt;code&gt;args&lt;/code&gt;变量是&lt;code&gt;tuple&lt;/code&gt;类型，&lt;code&gt;tuple&lt;/code&gt;中若只有一个对象，需要在后面加一个逗号。。&lt;/p&gt;
&lt;p&gt;所以修改代码为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fastcsr_input = [&amp;#39;--t1&amp;#39;,input_nu_image, &amp;#39;--L4&amp;#39;, t1_label_L4]
p_fastcsr = multiprocessing.Process(target=FastCSR_pipeline.main, args=(fastcsr_input,))
p_fastcsr.start()
p_fastcsr.join()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即可顺利运行&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VScode远程调试docker容器</title>
      <link>https://chenfei-ye.github.io/post/202206_vscode_docker/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/post/202206_vscode_docker/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;一般深度学习算法的训练和调试环境都在服务器端，想不做配置就直接使用vscode进行debug不太可能。而使用远程服务器时，一般用docker进行环境部署的情况比较多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用vscode远程连接服务器debug&lt;/strong&gt;和&lt;strong&gt;远程服务器上的docker&lt;/strong&gt;容器&lt;strong&gt;进行debug&lt;/strong&gt;，两者关键区别在于后者在docker容器创建时需要注意端口映射问题。本文主要讲解&lt;strong&gt;vscode远程连接服务器上的docker环境进行debug&lt;/strong&gt;的具体步骤。&lt;/p&gt;
&lt;h3 id=&#34;一服务器端的docker容器创建时需要注意的问题&#34;&gt;&lt;strong&gt;一、服务器端的docker容器创建时需要注意的问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;创建容器时，一般按照如下命令创建。其中，端口映射参数：&lt;strong&gt;-p&lt;/strong&gt; &lt;strong&gt;宿主机port:容器port&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo docker run &amp;ndash;gpus all -it -d -p 8010:22 &amp;ndash;name 容器名称 -v 本地路径或服务器物理路径：容器内路径 -d 镜像id /bin/bash&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的命令中**-p 8010:22**，就是将容器的22号端口（ssh服务端口）映射到宿主机（服务器）的8010端口。在本文中，因为需要使用ssh服务端口，所以，容器端口必须写22。（宿主机端口可以写成其他值，但是也不能乱写，防止端口冲突）。这样，在后续的vscode配置中，需要将连接端口写成宿主机（服务器端口），例如本文中的8010端口。下文中会介绍如何配置连接端口。&lt;/p&gt;
&lt;p&gt;注意：在整个配置过程中，应该保持创建的docker容器处于运行状态，方便后续调试。&lt;/p&gt;
&lt;h3 id=&#34;二docker容器内部相关配置&#34;&gt;&lt;strong&gt;二、docker容器内部相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍的方法需要使用ssh服务进行通信，因此，需要在环境中安装ssh。&lt;/p&gt;
&lt;h4 id=&#34;1进入容器中使用如下命令修改root用户密码&#34;&gt;&lt;strong&gt;1、进入容器中，使用如下命令修改root用户密码：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;passwd&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2检查容器内部是否安装-openssh-server与openssh-client若没安装执行如下命令&#34;&gt;&lt;strong&gt;2、检查容器内部是否安装 openssh-server与openssh-client，若没安装，执行如下命令：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;apt-get install openssh-serverapt-get install openssh-client&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3修改ssh配置文件以下选项&#34;&gt;&lt;strong&gt;3、修改ssh配置文件以下选项:&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;vim /etc/ssh/sshd_config&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在末尾增加如下内容(直接复制即可)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;#PermitRootLogin prohibit-password # 默认打开 禁止root用户使用密码登陆，需要将其注释&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;RSAAuthentication yes #启用 RSA 认证PubkeyAuthentication yes #启用公钥私钥配对认证方式PermitRootLogin yes #允许root用户使用ssh登录&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4启动sshd服务&#34;&gt;&lt;strong&gt;4、启动sshd服务&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;/etc/init.d/ssh restart&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;5退出容器连接测试&#34;&gt;&lt;strong&gt;5、退出容器，连接测试&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ssh &lt;a href=&#34;mailto:root@127.0.0.1&#34;&gt;root@127.0.0.1&lt;/a&gt; -p 8010&lt;/strong&gt; 注意，此处应该是测试8010端口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入密码成功进入容器内部即配置成功。&lt;/p&gt;
&lt;h3 id=&#34;三在vscode上的相关配置&#34;&gt;&lt;strong&gt;三、在vscode上的相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1安装remote-ssh插件&#34;&gt;&lt;strong&gt;1、安装remote-ssh插件&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在vscode最左侧应用“&lt;strong&gt;扩展&lt;/strong&gt;”中搜索&lt;strong&gt;remote-ssh&lt;/strong&gt;插件，然后安装。安装完成之后，会在“&lt;strong&gt;扩展&lt;/strong&gt;”图标下方出现“&lt;strong&gt;远程资源管理器&lt;/strong&gt;”图标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2配置vscode的config文件&#34;&gt;&lt;strong&gt;2、配置vscode的config文件&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单击“&lt;strong&gt;远程资源管理器&lt;/strong&gt;”图标，然后单击“&lt;strong&gt;配置&lt;/strong&gt;”按钮进行配置，此时vscode会显示“Select SSH configuration file to update”，选择路径中带有“.ssh”的config文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;填写config文件内容，注意按照如下格式填写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;可以根据自己的喜好起一个标志名称。&lt;strong&gt;HostName&lt;/strong&gt;必须填写需要远程连接的服务器IP地址。&lt;strong&gt;User&lt;/strong&gt;此处因为远程的是服务器上配置的docker容器，默认用户名是&lt;strong&gt;root&lt;/strong&gt;，此处需要改下为root。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;特别注意&lt;/strong&gt;：由于需要远程连接的是服务器上的docker容器，而且前面提到：ssh服务器的22号端口已经映射为8010,因此，务必增加一个&lt;strong&gt;Port&lt;/strong&gt;，填写自己映射的端口。如果只是远程服务器，不需要用docker容器，则，不需要增加Port这一行。配置完成后，保存配置。&lt;/p&gt;
&lt;h4 id=&#34;3开启远程连接&#34;&gt;&lt;strong&gt;3、开启远程连接&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如下图所示，config文件中写的Host名称alias就会显示在最左侧。此时，单击“新建连接”按钮，vscode会重新打开一个窗口，提示输入远程服务器的密码，注意，此时必须填入docker容器中创建的用户密码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;回车之后，可能会提示选择远程服务器的平台是哪一种系统类型，选项有linux\windows\MAC。应该选择vscode安装的系统平台类型。 选择完成之后，回车即可。此时，在vscode的“终端”窗口可以看到进入docker容器的命令行格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在“终端”窗口可以查看以下远程连接的环境是否正确。 打开远程服务器上的代码，可以在代码任意行最左侧打断点，按F5快捷键可以debug运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;四转载来源&#34;&gt;&lt;strong&gt;四，转载来源&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1851508&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.tencent.com/developer/article/1851508&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/hanchaobiao/article/details/84069299&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.csdn.net/hanchaobiao/article/details/84069299&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>神经纤维格式转换：tck转trk</title>
      <link>https://chenfei-ye.github.io/post/202206_tck2trk/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/post/202206_tck2trk/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MRtrix3&lt;/code&gt;输出的tck神经纤维文件，需要转换成&lt;code&gt;TrackVis&lt;/code&gt;能识别的trk格式&lt;/p&gt;
&lt;h2 id=&#34;python实现&#34;&gt;Python实现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python

import json
import nibabel as nib
from nibabel.streamlines import Field
from nibabel.orientations import aff2axcodes


def main():

    tck_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.tck&amp;#39;
    anatomy_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/bundle_segmentations/CC.nii.gz&amp;#39;
    trk_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.trk&amp;#39;

    nii = nib.load(anatomy_file)

    header = {}
    header[Field.VOXEL_TO_RASMM] = nii.affine.copy()
    header[Field.VOXEL_SIZES] = nii.header.get_zooms()[:3]
    header[Field.DIMENSIONS] = nii.shape[:3]
    header[Field.VOXEL_ORDER] = &amp;#34;&amp;#34;.join(aff2axcodes(nii.affine))

    tck = nib.streamlines.load(tck_file)
    nib.streamlines.save(tck.tractogram, trk_file, header=header)

        
if __name__ == &amp;#39;__main__&amp;#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
