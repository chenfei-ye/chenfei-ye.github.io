<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技巧 | 主页</title>
    <link>https://chenfei-ye.github.io/zh/category/%E6%8A%80%E5%B7%A7/</link>
      <atom:link href="https://chenfei-ye.github.io/zh/category/%E6%8A%80%E5%B7%A7/index.xml" rel="self" type="application/rss+xml" />
    <description>技巧</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><lastBuildDate>Thu, 06 Jun 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://chenfei-ye.github.io/media/icon_hu80a2544e7b046e76dea23103488b26f7_18404_512x512_fill_lanczos_center_3.png</url>
      <title>技巧</title>
      <link>https://chenfei-ye.github.io/zh/category/%E6%8A%80%E5%B7%A7/</link>
    </image>
    
    <item>
      <title>rs-fMRI预处理全流程</title>
      <link>https://chenfei-ye.github.io/zh/post/202406_rs_fmri_run/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202406_rs_fmri_run/</guid>
      <description>&lt;h3 id=&#34;rs-fmri预处理全流程&#34;&gt;rs-fMRI预处理全流程&lt;/h3&gt;
&lt;h4 id=&#34;前提&#34;&gt;前提：&lt;/h4&gt;
&lt;p&gt;输入数据须整理为&lt;a href=&#34;https://github.com/chenfei-ye/BIDS-fMRIpost/blob/main/resources/dcm2bids.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BIDS格式&lt;/a&gt;
示例：BIDS根目录为&lt;code&gt;/bids_root&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-freesurfer批处理&#34;&gt;1. freesurfer批处理&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 镜像路径：https://github.com/chenfei-ye/BIDS-freesurfer
docker run -it --rm -v /bids_root:/bids_dataset \
-v /bids_root/derivatives/freesurfer:/outputs \
-v /freesurfer_license.txt:/license.txt bids-freesurfer:latest \
/bids_dataset /outputs participant \
--license_file &amp;#34;/license.txt&amp;#34; --skip_bids_validator
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;freesurfer_license.txt&lt;/code&gt;可以&lt;a href=&#34;https://github.com/chenfei-ye/BIDS-freesurfer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点此下载&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;若运行后提示pybids报错，则需要手动指定被试&lt;code&gt;--participant_label [str]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-fmriprep批处理&#34;&gt;2. fmriprep批处理&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -it --rm -v /bids_root:/bids_dataset \
-v /freesurfer_license.txt:/opt/freesurfer/license.txt \
-v /bids_root:/working_dir nipreps/fmriprep:latest \
/bids_dataset /bids_dataset/derivatives/fmriprep participant \ 
--skip-bids-validation --ignore fieldmaps \
--md-only-boilerplate --output-spaces MNI152NLin2009cAsym:res-2 T1w \
--nthreads 20 --stop-on-first-crash --mem_mb 5000 \
--use-syn-sdc --fd-spike-threshold 0.5 -v -w /working_dir --cifti-output 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;指定&lt;code&gt;/working_dir&lt;/code&gt;是为了将中间文件缓存到硬盘，否则内存容易爆掉；运行完毕后建议删除以节省空间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cifti-output &lt;/code&gt;是为了输出cifti结果，便于&lt;code&gt;xcp-d&lt;/code&gt;处理；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--nthreads&lt;/code&gt;及&lt;code&gt;--mem_mb&lt;/code&gt;根据实际服务器资源来确定计算的线程及内存；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fs-subjects-dir&lt;/code&gt;指定已经处理完毕的&lt;code&gt;freesurfer&lt;/code&gt;分割输出结果；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--output-spaces&lt;/code&gt;输出空间增加&lt;code&gt;T1w&lt;/code&gt;是为了后续可能用到的皮层&lt;a href=&#34;https://github.com/edickie/ciftify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ciftify&lt;/a&gt;分析；&lt;/li&gt;
&lt;li&gt;如果提示metadata找不到&lt;code&gt;TotalReadoutTime&lt;/code&gt;，则需要在json文件中手动补充该字段；&lt;/li&gt;
&lt;li&gt;如果提示metadata找不到&lt;code&gt;PhaseEncodingDirection&lt;/code&gt;，则需要在json文件中手动补充该字段；如果已存在该字段仍报错，则有可能BIDS根目录中存在被试缺少必要的&lt;code&gt;T1w&lt;/code&gt;或&lt;code&gt;BOLD&lt;/code&gt;数据，要仔细检查。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-xcp-d批处理&#34;&gt;3. xcp-d批处理&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --rm -it -v /bids_root/derivatives/fmriprep:/fmriprep:ro \
-v /bids_root/derivatives/wkdir:/work:rw \
-v /bids_root/derivatives/xcp_d:/out:rw \
-v /atlases/TEMPLATEFLOW_HOME:/home/xcp_d/.cache/templateflow \
-v /atlases:/fs_license pennlinc/xcp_d:latest \
/fmriprep /out participant --cifti --despike --head_radius auto \
-w /work --nthreads 10 --mem_gb 10 --fd-thresh 0 \
--nuisance-regressors 36P --fs-license-file /fs_license/freesurfer_license.txt \
--min-coverage 0.2 --stop-on-first-crash \
--atlases 4S156Parcels 4S256Parcels 4S456Parcels 4S1056Parcels HCP
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;xcp-d pipeline优势：数据可以自动预处理并使用NiPrep风格的容器化代码，在BIDS格式下从原始数据一直分析到功能连接矩阵（也包括BOLD信号、ALFF、REHO等）。XCP-D 正好在 fMRIPrep 结束的地方接手，直接使用 fMRIPrep 的输出。XCP-D 利用 BIDS 和 NiPreps 框架自动生成去噪的 BOLD 图像、分割的时间序列、功能连接矩阵和质量评估报告。XCP-D 还可以处理来自以下来源的输出：NiBabies、ABCD-BIDS、最小预处理的 HCP 数据以及英国生物银行数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4S&lt;/code&gt;图谱：The 4S atlas combines the Schaefer 2018 cortical atlas at 10 different resolutions (100, 200, 300, 400, 500, 600, 700, 800, 900, and 1000 parcels) with the CIT168 subcortical atlas, the Diedrichson cerebellar atlas, the HCP thalamic atlas, and the amygdala and hippocampus parcels from the HCP CIFTI subcortical parcellation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4S&lt;/code&gt;图谱里的非皮层结构过于复杂，可以无视；如果需要皮层下结构，直接用HCP CIFTI subcortical parcellation就可以，和&lt;code&gt;FreeSurfer&lt;/code&gt;定义的皮层下图谱的结构是一致的。适用于&lt;code&gt;Enigma-toolbox&lt;/code&gt;的可视化。Enigma-toolbox的皮层下可视化结构：Subcortical input values are ordered as follows: left-accumbens, left-amygdala, left-caudate, left-hippocampus, left-pallidum, left-putamen, left-thalamus, left-ventricles, right-accumbens, right-amygdala, right-caudate, right-hippocampus, right-pallidum, right-putamen, right-thalamus, right-ventricles! You can re-order your subcortical dataset using our reorder_sctx() function. *Ventricles are optional.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fd-thresh 0&lt;/code&gt;：不执行censoring,否则会丢失帧；&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;--cifti&lt;/code&gt;，需要&lt;code&gt;fmriprep&lt;/code&gt;里预存fsLR的图谱才可以跑。&lt;code&gt;fmriprep&lt;/code&gt;参数加&lt;code&gt;--cifti-output&lt;/code&gt;，默认是91k皮层。对于nifti输出结果，很可能有脑区的值是NaN，可以保留NaN进行后续的计算。&lt;a href=&#34;https://neurostars.org/t/n-a-timeseries-for-some-roi-when-using-xcp-d-for-postprocessing/27108/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;讨论参考&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/TEMPLATEFLOW_HOME&lt;/code&gt;是&lt;a href=&#34;https://github.com/templateflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;templateflow&lt;/a&gt;的本地路径，是为了预加载已下载的&lt;code&gt;templateflow&lt;/code&gt;图谱，否则每次容器运行时会从s3.amazon新下载&lt;code&gt;templateflow&lt;/code&gt;图谱，速度很慢。&lt;code&gt;templateflow&lt;/code&gt;图谱也可在网盘下载：链接：https://pan.baidu.com/s/13bPkN3Vzcyy6LoSwB7UQKg?pwd=9h4i ；提取码：9h4i&lt;/li&gt;
&lt;li&gt;对于脑区水平的BOLD信号和FC计算，xcp-d不推荐做平滑，原因是：Smoothing improves SNR in a given voxel by blurring the signal across voxels, but when you are averaging the signal in an ROI, there’s no reason to do that, since you’re not interested in individual voxels. Smoothing before parcellating could, at worst, blur signals from voxels outside the region into the region.&lt;/li&gt;
&lt;li&gt;yeo-7和yeo-17的脑区空间定义是一样的，只是同一个脑区不一定对应到一个子网络上。具体对应关系&lt;a href=&#34;https://github.com/PennLINC/AtlasPack/blob/main/Schaefer/atlas-Schaefer2018v0143_desc-100ParcelsAllNetworks_dseg.tsv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;见此&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;对于Minimally preprocessed HCP数据的预处理（输入数据需要同时用到subid_3T_rfMRI_REST1_preproc.zip 和subid_3T_Structural_preproc.zip）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --rm -it -v /data3/HCP/input:/fmriprep:ro \
-v /data3/HCP/wkdir:/work:rw -v /data3/HCP/xcp_d:/out:rw \
-v /data/freesurfer/:/fs_license pennlinc/xcp_d:latest \
/fmriprep /out participant --cifti --despike --head_radius auto -w /work \
--input-type hcp --nthreads 20 --mem_gb 10 --fd-thresh 0 \
--nuisance-regressors 36P --fs-license-file /fs_license/freesurfer_license.txt \
--min-coverage 0.2 --stop-on-first-crash \
--atlases 4S156Parcels 4S256Parcels 4S456Parcels HCP
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>利用Surfplot和Brainspace进行脑图可视化</title>
      <link>https://chenfei-ye.github.io/zh/post/202402_surfplot_brainspace/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202402_surfplot_brainspace/</guid>
      <description>&lt;h3 id=&#34;可视化&#34;&gt;可视化：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/danjgale/surfplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;surfplot&lt;/a&gt;提供了脑图可视化方法，基于&lt;a href=&#34;https://brainspace.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;brainspace&lt;/a&gt;开发实现。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chenfei-ye/chenfei-ye.github.io/tree/main/zh/post/202402_surfplot_brainspace/Brain_Atlas_Plot.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;针对Yeo脑网络的可视化参考示例&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依赖提示：建议运行环境预装&lt;a href=&#34;https://humanconnectome.org/software/workbench-command&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wb_command&lt;/a&gt;并写入环境变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何可视化NIFTI：&lt;a href=&#34;https://github.com/danjgale/surfplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;surfplot&lt;/a&gt;默认仅支持GIFTI或CIFTI的皮层染色。对于NIFTI文件，需要&lt;a href=&#34;https://netneurolab.github.io/neuromaps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;neuromap&lt;/a&gt;实现空间转换，参考：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已知坑1：远程服务器安装&lt;code&gt;surfplot&lt;/code&gt;后，如果&lt;code&gt;jupyter&lt;/code&gt;可视化出现内核挂掉的错误，大概率来源于&lt;code&gt;brainspace&lt;/code&gt;中&lt;code&gt;vtk&lt;/code&gt;的问题，须参考&lt;a href=&#34;https://github.com/MICA-MNI/BrainSpace/issues/66&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方解决方案&lt;/a&gt;重装&lt;code&gt;vtk&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from neuromaps.datasets import fetch_fslr
from surfplot import Plot
from neuromaps import transforms

gii_lh, gii_rh= transforms.mni152_to_fslr(nifti_file_path_in_MNI152_space, &amp;#39;32k&amp;#39;)
surfaces = fetch_fslr()
lh, rh = surfaces[&amp;#39;inflated&amp;#39;]
p = Plot(lh, rh, layout =  &amp;#39;row&amp;#39;, size =  (1000, 400), zoom = 1.2)
p.add_layer({&amp;#39;left&amp;#39;: gii_lh, &amp;#39;right&amp;#39;: gii_rh}, cbar=True)
fig = p.build()
fig.show()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;梯度分析&#34;&gt;梯度分析&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://brainspace.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;brainspace&lt;/a&gt;，一个Python/Matlab工具箱，用于(i)识别梯度，(ii)梯度对齐，(iii)梯度可视化。BrainSpace还可以对梯度与其他大脑特征之间的关联进行控制研究，生成空模型，以解释空间自相关性。验证实验证明了该工具在分析不同空间尺度上的功能和微观结构梯度时的实用性和一致性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已知坑1：&lt;code&gt;brainspace&lt;/code&gt;对于大矩阵计算（如10K节点）的运算时间会很慢，建议按&lt;a href=&#34;https://github.com/MICA-MNI/BrainSpace/issues/85&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此方案&lt;/a&gt;手动修正源代码从而提速。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>如何提取脑图谱/脑区label文件的中心坐标</title>
      <link>https://chenfei-ye.github.io/zh/post/202402_label_coord/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202402_label_coord/</guid>
      <description>&lt;h3 id=&#34;解决&#34;&gt;解决&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import  nilearn.plotting  as  pl
import  nibabel  as  nib

labels_img  =  nib.load(&amp;#39;/data/cye_code/BIDS-fmripost/atlases/AAL1PD25_MNI.nii.gz&amp;#39;)
coords  =  pl.find_parcellation_cut_coords(labels_img)
np.savetxt(&amp;#34;/data/cye_code/BIDS-fmripost/atlases/coords.csv&amp;#34;, coords.astype(int), delimiter=&amp;#34;,&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>VSCode在debug时无法设置第三方包函数断点的问题</title>
      <link>https://chenfei-ye.github.io/zh/post/202402_vscode_debug/</link>
      <pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202402_vscode_debug/</guid>
      <description>&lt;h3 id=&#34;解决&#34;&gt;解决&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# add a launch configuration 
&amp;#34;justMyCode&amp;#34;:false` 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See &lt;a href=&#34;https://code.visualstudio.com/docs/python/debugging#_justmycode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code.visualstudio.com/docs/python/debugging#_justmycode&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rs-fMRI预处理完整流程</title>
      <link>https://chenfei-ye.github.io/zh/post/202308_fmripost/</link>
      <pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202308_fmripost/</guid>
      <description>&lt;h1 id=&#34;bids-fmripost&#34;&gt;BIDS-fMRIpost&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;BIDS-fmripost&lt;/code&gt;是基于&lt;a href=&#34;https://fmriprep.org/en/stable/installation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fMRIPrep&lt;/a&gt;  的后处理分析流程，基于&lt;a href=&#34;https://nilearn.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nilearn&lt;/a&gt;开发。分析功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协变量回归（confound regression）&lt;/li&gt;
&lt;li&gt;空间平滑（spatial smoothing）&lt;/li&gt;
&lt;li&gt;基于脑区的BOLD信号提取 (BOLD signal extraction)&lt;/li&gt;
&lt;li&gt;功能连接网络计算 （FC network）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前主要用于静息态功能磁共振影像数据的脑网络分析。该脚本的输入数据需符合&lt;a href=&#34;https://bids.neuroimaging.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BIDS格式&lt;/a&gt;，输入模态需包括3D-T1w和fMRI。目前支持的图谱包括：  &lt;code&gt;AAL1_MNI&lt;/code&gt;,  &lt;code&gt;AAL2_MNI&lt;/code&gt;,  &lt;code&gt;AAL3_MNI&lt;/code&gt;,  &lt;code&gt;desikan_T1w&lt;/code&gt;,  &lt;code&gt;destrieux_T1w&lt;/code&gt;,  &lt;code&gt;hcpmmp_T1w&lt;/code&gt;  ,  &lt;code&gt;schaefer100_MNI&lt;/code&gt;,  &lt;code&gt;schaefer200_MNI&lt;/code&gt;  ,  &lt;code&gt;schaefer400_MNI&lt;/code&gt;,  &lt;code&gt;schaefer1000_MNI&lt;/code&gt;,  &lt;code&gt;PD25_MNI&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;具体使用说明&lt;a href=&#34;https://github.com/chenfei-ye/BIDS-fMRIpost/blob/main/resources/README_Chs.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点此&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vtk文件转mesh格式</title>
      <link>https://chenfei-ye.github.io/zh/post/202308_vtk2mesh/</link>
      <pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202308_vtk2mesh/</guid>
      <description>&lt;h1 id=&#34;vtk文件转mesh格式&#34;&gt;vtk文件转mesh格式&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;安装gmsh的binary文件 &lt;a href=&#34;https://gmsh.info/bin/Linux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gmsh.info/bin/Linux/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转档&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 方式1 
gmsh -3 -o .msh 
# 方式2 
gmsh -3 -save
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;本地安装gmsh GUI软件打开验证&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实也可以用&lt;code&gt;gmsh GUI&lt;/code&gt;直接转档&lt;/p&gt;
&lt;h3 id=&#34;注意容器系统环境可能需要安装libxcursor1才能支持gmsh&#34;&gt;注意：容器系统环境可能需要安装libxcursor1才能支持gmsh&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt install libxcursor1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>关于最近一些MRI-T1w结构像处理pipeline的测试</title>
      <link>https://chenfei-ye.github.io/zh/post/202303_parcellate/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202303_parcellate/</guid>
      <description>&lt;h2 id=&#34;fastsurfer---全脑分割&#34;&gt;FastSurfer -&amp;gt; 全脑分割&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://deep-mi.org/research/fastsurfer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://deep-mi.org/research/fastsurfer/&lt;/a&gt;
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://deep-mi.org/static/img/research/fastsurfer/01_teaser_white.png&#34; alt=&#34;!&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

FastSurfer is a fast and &lt;a href=&#34;https://deep-mi.org/research/fastsurfer/#proof-of-concept&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensively validated&lt;/a&gt; deep-learning pipeline for the fully automated processing of structural human brain MRIs. As such, it provides FreeSurfer conform outputs, enables scalable big-data analysis and time-critical clinical applications such as structure localization during image acquisition or extraction of quantitative measures.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 完整分割（GPU） 
docker run --gpus all -v /data/mg_data/mnt/bl_test/input:/data -v /data/mg_data/mnt/bl_test/fastsf_output:/output -v /data/freesurfer:/fs_license --rm deepmi/fastsurfer:gpu-v1.1.1 --fs_license /fs_license/freesurfer_license.txt --t1 /data/t1.nii --sid subject2 --sd /output --parallel 

# DKT Lookup table 
31和63作为脉络丛会被分割出来，应该当做LV，对应4和43 
77作为WMH，没有区分左右，不便合并
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;synthseg---全脑分割计算icv&#34;&gt;SynthSeg -&amp;gt; 全脑分割，计算ICV&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/BBillot/SynthSeg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/BBillot/SynthSeg&lt;/a&gt;
&lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/fswiki/SynthSeg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://surfer.nmr.mgh.harvard.edu/fswiki/SynthSeg&lt;/a&gt;
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://surfer.nmr.mgh.harvard.edu/fswiki/SynthSeg?action=AttachFile&amp;amp;do=get&amp;amp;target=robust2.png&#34; alt=&#34;!&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SynthSeg&lt;/code&gt; 可不依赖GPU，实测CPU多线程计算约2分钟内完成&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 分割 （完整） 
mri_synthseg --i /dataio/t1.nii --parc --robust --vol /dataio/vol.csv --qc /dataio/qc.csv --threads 172 --o /dataio/t1_seg.nii.gz 
# 注意 --resample如果输入本身是1mm iso，则不会生成resample图像
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;synthstrip---剥头皮&#34;&gt;SynthStrip -&amp;gt; 剥头皮&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/docs/synthstrip/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://surfer.nmr.mgh.harvard.edu/docs/synthstrip/&lt;/a&gt;
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://surfer.nmr.mgh.harvard.edu/docs/synthstrip/resources/SynthStripExamples.png&#34; alt=&#34;!&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

SynthStrip is a skull-stripping tool that extracts brain signal from a landscape of image types, ranging across imaging modality, contrast, resolution, and subject population. It leverages a deep learning strategy that synthesizes arbitrary training images from segmentation maps to optimize a robust model agnostic to acquisition specifics.
&lt;a href=&#34;https://doi.org/10.1016/j.neuroimage.2022.119474&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.1016/j.neuroimage.2022.119474&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 自动去头皮（多模态泛化性优秀），1分钟以内 
mri_synthstrip -i /dataio/t1.nii -o /dataio/t1_bet.nii -m /dataio/t1_mask.nii
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sbtiv--计算icv&#34;&gt;sbTIV-&amp;gt; 计算ICV&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://freesurfer.net/fswiki/Samseg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://freesurfer.net/fswiki/Samseg&lt;/a&gt;
&lt;a href=&#34;https://freesurfer.net/fswiki/sbTIV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://freesurfer.net/fswiki/sbTIV&lt;/a&gt;
Total intracranial volume (TIV/ICV) is an important covariate for volumetric analyses of the brain and brain regions. It is commonly used to correct for head size variation (i.e., &amp;rsquo;normalize&amp;rsquo; hippocampal volume size). The gold-standard method is manual delineation of T2 scans. Freesurfer currently provides the eTIV measure, described &lt;a href=&#34;https://freesurfer.net/fswiki/eTIV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. It has been shown to be a robust covariate.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://freesurfer.net/fswiki/Samseg?action=AttachFile&amp;amp;do=get&amp;amp;target=3D_small.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## 计算sbTIV (segmentation-based TIV)，大约5-10分钟
run_samseg --input /home/username/data/t1.nii --output /home/username/data/samsegOutput/ --threads 8
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;关于freesurfer图谱&#34;&gt;关于FreeSurfer图谱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DK图谱lookuptable &lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT&lt;/a&gt; &lt;a href=&#34;https://www.cis.jhu.edu/~parky/MRN/Desikan%20Region%20Labels%20and%20Descriptions.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cis.jhu.edu/~parky/MRN/Desikan%20Region%20Labels%20and%20Descriptions.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DKT 图谱： &lt;a href=&#34;https://mindboggle.readthedocs.io/en/latest/labels.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mindboggle.readthedocs.io/en/latest/labels.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HCPMMP图谱 ： &lt;a href=&#34;https://neuroimaging-core-docs.readthedocs.io/en/latest/pages/atlases.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://neuroimaging-core-docs.readthedocs.io/en/latest/pages/atlases.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter远程调试docker容器</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_jupyter_docker/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_jupyter_docker/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chenfei-ye.github.io/zh/post/202206_vscode_docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上一篇&lt;/a&gt;写了如何使用vscode远程连接服务器的docker容器进行debug，这篇简单记录一下如何使用jupyter远程连接服务器的docker容器。&lt;/p&gt;
&lt;p&gt;场景： 本地win10笔记本，远程连接远程ubuntu服务器的docker容器&lt;/p&gt;
&lt;p&gt;使用jupyter相对于vscode的优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动态笔记脚本，Markdown与code的完美结合&lt;/li&gt;
&lt;li&gt;画图，模型训练&lt;/li&gt;
&lt;li&gt;快速运行下载的开源&lt;code&gt;ipynb&lt;/code&gt;文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然对于神经影像pipeline项目，个人更偏爱vscode去debug&lt;/p&gt;
&lt;p&gt;言归正传：&lt;/p&gt;
&lt;h3 id=&#34;一服务器端容器设置&#34;&gt;&lt;strong&gt;一、服务器端容器设置&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1容器启动设置端口&#34;&gt;&lt;strong&gt;1、容器启动，设置端口&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 建议提前启动一个tmux窗口，防止远端服务断电断网
docker run -it --rm --gpus all -p 9999:9999 mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2生成notebook-配置文件&#34;&gt;&lt;strong&gt;2、生成notebook 配置文件&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-get install jupyter
apt-get install ipython
jupyter notebook --generate-config
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3生成密码&#34;&gt;&lt;strong&gt;3、生成密码&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jupyter notebook password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时会在&lt;code&gt;/root/.jupyter/jupyter_notebook_config.json&lt;/code&gt;中生成密文。复制该密文，如&lt;code&gt;sha1:56a8dc892ab2:239cb1f1bda7f8614e546853e8298efc566489d9&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;4修改配置文件&#34;&gt;&lt;strong&gt;4、修改配置文件&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;/root/.jupyter/jupyter_notebook_config.py&lt;/code&gt;中添加这几行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;c.NotebookApp.ip=&amp;#39;*&amp;#39;
c.NotebookApp.password = u&amp;#39;刚才复制的那个密文&amp;#39;
c.NotebookApp.open_browser = False
c.NotebookApp.port =9999 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;5安装python3-dev&#34;&gt;&lt;strong&gt;5、安装python3-dev&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;提前解决jupyter无法连接python3服务器内核 一直显示正在连接服务器的问题&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-get install python3-dev
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;6安装ipykernel&#34;&gt;&lt;strong&gt;6、安装ipykernel&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 将当前python环境添加进jupyter kernel
pip install ipykernel
python -m ipykernel install --name cye（你的环境名）`
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;7启动jupyter&#34;&gt;&lt;strong&gt;7、启动jupyter&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jupyter notebook --ip=0.0.0.0 --no-browser --allow-root --port 9999
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;二win10本地相关配置&#34;&gt;&lt;strong&gt;二、win10本地相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;假设windows环境已成功安装anaconda和jupyter&lt;/p&gt;
&lt;h4 id=&#34;1连接远程服务器&#34;&gt;&lt;strong&gt;1、连接远程服务器：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;打开&lt;code&gt;Anaconda prompt&lt;/code&gt;终端，连接远端：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -L 9999:localhost:9999 [用户名]@[主机IP]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时需输入远端服务器密码（不是docker容器中刚才新设的密码）&lt;/p&gt;
&lt;h4 id=&#34;2浏览器打开jupyter&#34;&gt;&lt;strong&gt;2、浏览器打开jupyter：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;本地浏览器输入&lt;a href=&#34;http://localhost:9999/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:9999&lt;/a&gt;
然后输入登录Jupyter Notebook的密码（即docker容器中刚才新设的密码），选择刚才新建的kernel环境 (e.g., &lt;code&gt;cye&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;BINGO！&lt;/p&gt;
&lt;h3 id=&#34;三参考资料&#34;&gt;&lt;strong&gt;三，参考资料&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_42001765/article/details/96144442&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.csdn.net/qq_42001765/article/details/96144442&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/using-jupyter-notebook-running-on-a-remote-docker-container-via-ssh-ea2c3ebb9055&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://towardsdatascience.com/using-jupyter-notebook-running-on-a-remote-docker-container-via-ssh-ea2c3ebb9055&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012325865/article/details/99692108&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.csdn.net/u012325865/article/details/99692108&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>FSL-Dokerfile编写</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_dockerfile_fsl/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_dockerfile_fsl/</guid>
      <description>&lt;p&gt;通过下载源文件安装FSL（测试成功，但不稳定，取决于网络）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    libegl1-mesa-dev &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    libopenblas-dev&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# fsl install  &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl-6.0.3&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;FSLOUTPUTTYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NIFTI_GZ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl-6.0.3/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Downloading FSL ...&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir -p /opt/fsl-6.0.3 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl -fsSL --retry &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.3-centos6_64.tar.gz &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tar -xz -C /opt/fsl-6.0.3 --strip-components &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/doc&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/atlases&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/possum&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/extras/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/fslview*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/FSLeyes&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Installing FSL conda environment ...&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sed -i -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;/fsleyes/d&amp;#34;&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;/wxpython/d&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/etc/fslconf/fslpython_environment.yml &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash /opt/fsl-6.0.3/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.3 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; find &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/fslpython/envs/fslpython/lib/python3.7/site-packages/ -type d -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;tests&amp;#34;&lt;/span&gt;  -print0 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -0 rm -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/fslpython/bin/conda clean --all&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过本地文件安装FSL（不执行&lt;code&gt;fslpython_install.sh&lt;/code&gt; 不会影响常用命令，但会影响bianca, FSLeyes等）。 &lt;strong&gt;注意&lt;/strong&gt;：最后一行用于指定eddy_cuda&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    libegl1-mesa-dev &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    libopenblas-dev&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; fsl-6.0.4-centos6_64.tar.gz /opt/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Downloading FSL ...&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir -p /opt/fsl-6.0.4 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xzvf /opt/fsl-6.0.4-centos6_64.tar.gz -C /opt/fsl-6.0.4 --strip-components &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/doc&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/atlases&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/possum&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/extras/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/fslview*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/FSLeyes&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm /opt/fsl-6.0.4-centos6_64.tar.gz &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -s /opt/fsl-6.0.4/bin/eddy_cuda9.1 /opt/fsl-6.0.4/bin/eddy_cuda &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;推荐&lt;/strong&gt;： 简化安装FSL-6.0.4&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Download minified FSL (6.0.4)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /opt/fsl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; curl -fsSL https://osf.io/dv258/download &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tar xz --strip-components &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLOUTPUTTYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NIFTI_GZ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLMULTIFILEQUIT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;TRUE&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLTCLSH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl/bin/fsltclsh&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLWISH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl/bin/fslwish&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;:/opt/fsl/bin &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$FSLDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>VScode远程调试docker容器</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_vscode_docker/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_vscode_docker/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;一般深度学习算法的训练和调试环境都在服务器端，想不做配置就直接使用vscode进行debug不太可能。而使用远程服务器时，一般用docker进行环境部署的情况比较多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用vscode远程连接服务器debug&lt;/strong&gt;和&lt;strong&gt;远程服务器上的docker&lt;/strong&gt;容器&lt;strong&gt;进行debug&lt;/strong&gt;，两者关键区别在于后者在docker容器创建时需要注意端口映射问题。本文主要讲解&lt;strong&gt;vscode远程连接服务器上的docker环境进行debug&lt;/strong&gt;的具体步骤。&lt;/p&gt;
&lt;h3 id=&#34;一服务器端的docker容器创建时需要注意的问题&#34;&gt;&lt;strong&gt;一、服务器端的docker容器创建时需要注意的问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;创建容器时，一般按照如下命令创建。其中，端口映射参数：&lt;strong&gt;-p&lt;/strong&gt; &lt;strong&gt;宿主机port:容器port&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo docker run &amp;ndash;gpus all -it -d -p 8010:22 &amp;ndash;name 容器名称 -v 本地路径或服务器物理路径：容器内路径 -d 镜像id /bin/bash&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的命令中**-p 8010:22**，就是将容器的22号端口（ssh服务端口）映射到宿主机（服务器）的8010端口。在本文中，因为需要使用ssh服务端口，所以，容器端口必须写22。（宿主机端口可以写成其他值，但是也不能乱写，防止端口冲突）。这样，在后续的vscode配置中，需要将连接端口写成宿主机（服务器端口），例如本文中的8010端口。下文中会介绍如何配置连接端口。&lt;/p&gt;
&lt;p&gt;注意：在整个配置过程中，应该保持创建的docker容器处于运行状态，方便后续调试。&lt;/p&gt;
&lt;h3 id=&#34;二docker容器内部相关配置&#34;&gt;&lt;strong&gt;二、docker容器内部相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍的方法需要使用ssh服务进行通信，因此，需要在环境中安装ssh。&lt;/p&gt;
&lt;h4 id=&#34;1进入容器中使用如下命令修改root用户密码&#34;&gt;&lt;strong&gt;1、进入容器中，使用如下命令修改root用户密码：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;passwd&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2检查容器内部是否安装-openssh-server与openssh-client若没安装执行如下命令&#34;&gt;&lt;strong&gt;2、检查容器内部是否安装 openssh-server与openssh-client，若没安装，执行如下命令：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;apt update
apt-get install openssh-server
apt-get install openssh-client
apt-get install vim&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若&lt;code&gt;apt update&lt;/code&gt;更新失败，可以换以下清华源，替换文件&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3修改ssh配置文件以下选项&#34;&gt;&lt;strong&gt;3、修改ssh配置文件以下选项:&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;vim /etc/ssh/sshd_config&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在末尾增加如下内容(直接复制即可)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PermitRootLogin yes #允许root用户使用ssh登录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4启动sshd服务&#34;&gt;&lt;strong&gt;4、启动sshd服务&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;/etc/init.d/ssh restart&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;三在vscode上的相关配置&#34;&gt;&lt;strong&gt;三、在vscode上的相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1安装remote-ssh插件&#34;&gt;&lt;strong&gt;1、安装remote-ssh插件&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在vscode最左侧应用“&lt;strong&gt;扩展&lt;/strong&gt;”中搜索&lt;strong&gt;remote-ssh&lt;/strong&gt;插件，然后安装。安装完成之后，会在“&lt;strong&gt;扩展&lt;/strong&gt;”图标下方出现“&lt;strong&gt;远程资源管理器&lt;/strong&gt;”图标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2配置vscode的config文件&#34;&gt;&lt;strong&gt;2、配置vscode的config文件&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单击“&lt;strong&gt;远程资源管理器&lt;/strong&gt;”图标，然后单击“&lt;strong&gt;配置&lt;/strong&gt;”按钮进行配置，此时vscode会显示“Select SSH configuration file to update”，选择路径中带有“.ssh”的config文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;填写config文件内容，注意按照如下格式填写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;可以根据自己的喜好起一个标志名称。&lt;strong&gt;HostName&lt;/strong&gt;必须填写需要远程连接的服务器IP地址。&lt;strong&gt;User&lt;/strong&gt;此处因为远程的是服务器上配置的docker容器，默认用户名是&lt;strong&gt;root&lt;/strong&gt;，此处需要改下为root。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;特别注意&lt;/strong&gt;：由于需要远程连接的是服务器上的docker容器，而且前面提到：ssh服务器的22号端口已经映射为8010,因此，务必增加一个&lt;strong&gt;Port&lt;/strong&gt;，填写自己映射的端口。如果只是远程服务器，不需要用docker容器，则，不需要增加Port这一行。配置完成后，保存配置。&lt;/p&gt;
&lt;h4 id=&#34;3开启远程连接&#34;&gt;&lt;strong&gt;3、开启远程连接&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如下图所示，config文件中写的Host名称alias就会显示在最左侧。此时，单击“新建连接”按钮，vscode会重新打开一个窗口，提示输入远程服务器的密码，注意，此时必须填入docker容器中创建的用户密码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;回车之后，可能会提示选择远程服务器的平台是哪一种系统类型，选项有linux\windows\MAC。应该选择vscode安装的系统平台类型。 选择完成之后，回车即可。此时，在vscode的“终端”窗口可以看到进入docker容器的命令行格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在“终端”窗口可以查看以下远程连接的环境是否正确。 打开远程服务器上的代码，可以在代码任意行最左侧打断点，按F5快捷键可以debug运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;四转载来源&#34;&gt;&lt;strong&gt;四，转载来源&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1851508&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.tencent.com/developer/article/1851508&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/hanchaobiao/article/details/84069299&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.csdn.net/hanchaobiao/article/details/84069299&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>用于神经影像算法开发的基础镜像</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_dockerfile_all/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_dockerfile_all/</guid>
      <description>&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;把以下命令添加到&lt;code&gt;Dockfile&lt;/code&gt;即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;p&gt;工具包括：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ubuntu + cuda11 + python== 3.8.3 + torch== 1.7.0 + ants== 2.3.1 mrtrix3== 3.0.3 fsl== 6.0.4 c3d== nightly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;python包：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;astor                  0.8.1           &lt;br&gt;
backcall               0.2.0           &lt;br&gt;
beautifulsoup4         4.9.3           &lt;br&gt;
bids-validator         1.9.3           &lt;br&gt;
certifi                2020.6.20       &lt;br&gt;
cffi                   1.14.0          &lt;br&gt;
chardet                3.0.4           &lt;br&gt;
ci-info                0.2.0           &lt;br&gt;
click                  8.1.3           &lt;br&gt;
conda                  4.9.1           &lt;br&gt;
conda-build            3.20.5          &lt;br&gt;
conda-package-handling 1.7.0           &lt;br&gt;
cryptography           2.9.2           &lt;br&gt;
cycler                 0.11.0          &lt;br&gt;
dataclasses            0.6             &lt;br&gt;
decorator              4.4.2           &lt;br&gt;
dnspython              2.0.0           &lt;br&gt;
docopt                 0.6.2           &lt;br&gt;
etelemetry             0.3.0           &lt;br&gt;
filelock               3.0.12          &lt;br&gt;
fonttools              4.33.3          &lt;br&gt;
formulaic              0.3.4           &lt;br&gt;
future                 0.18.2          &lt;br&gt;
glob2                  0.7             &lt;br&gt;
idna                   2.9             &lt;br&gt;
interface-meta         1.3.0           &lt;br&gt;
ipython                7.18.1          &lt;br&gt;
ipython-genutils       0.2.0           &lt;br&gt;
isodate                0.6.1           &lt;br&gt;
jedi                   0.17.2          &lt;br&gt;
Jinja2                 2.11.2          &lt;br&gt;
joblib                 1.1.0           &lt;br&gt;
kiwisolver             1.4.2           &lt;br&gt;
libarchive-c           2.9             &lt;br&gt;
looseversion           1.0.1           &lt;br&gt;
lxml                   4.8.0           &lt;br&gt;
MarkupSafe             1.1.1           &lt;br&gt;
matplotlib             3.5.2           &lt;br&gt;
mkl-fft                1.2.0           &lt;br&gt;
mkl-random             1.1.1           &lt;br&gt;
mkl-service            2.3.0           &lt;br&gt;
networkx               2.8             &lt;br&gt;
&lt;strong&gt;nibabel&lt;/strong&gt;                3.2.2           &lt;br&gt;
&lt;strong&gt;nilearn&lt;/strong&gt;                0.9.1           &lt;br&gt;
&lt;strong&gt;nipype&lt;/strong&gt;                 1.8.1           &lt;br&gt;
num2words              0.5.10          &lt;br&gt;
numpy                  1.19.2          &lt;br&gt;
olefile                0.46            &lt;br&gt;
packaging              21.3            &lt;br&gt;
pandas                 1.4.2           &lt;br&gt;
parso                  0.7.0           &lt;br&gt;
pexpect                4.8.0           &lt;br&gt;
pickleshare            0.7.5           &lt;br&gt;
Pillow                 9.0.0           &lt;br&gt;
pip                    20.0.2          &lt;br&gt;
pkginfo                1.6.0           &lt;br&gt;
prompt-toolkit         3.0.8           &lt;br&gt;
prov                   2.0.0           &lt;br&gt;
psutil                 5.7.2           &lt;br&gt;
ptyprocess             0.6.0           &lt;br&gt;
&lt;strong&gt;pybids&lt;/strong&gt;                 0.15.1          &lt;br&gt;
pycosat                0.6.3           &lt;br&gt;
pycparser              2.20            &lt;br&gt;
pydot                  1.4.2           &lt;br&gt;
Pygments               2.7.1           &lt;br&gt;
pyOpenSSL              19.1.0          &lt;br&gt;
pyparsing              3.0.9           &lt;br&gt;
PySocks                1.7.1           &lt;br&gt;
python-dateutil        2.8.2           &lt;br&gt;
python-etcd            0.4.5           &lt;br&gt;
pytz                   2020.1          &lt;br&gt;
PyYAML                 5.3.1           &lt;br&gt;
rdflib                 6.1.1           &lt;br&gt;
requests               2.23.0          &lt;br&gt;
ruamel-yaml            0.15.87         &lt;br&gt;
&lt;strong&gt;scikit-learn&lt;/strong&gt;           1.1.0           &lt;br&gt;
scipy                  1.8.0           &lt;br&gt;
setuptools             46.4.0.post20200518
simplejson             3.17.6          &lt;br&gt;
six                    1.14.0          &lt;br&gt;
soupsieve              2.0.1           &lt;br&gt;
SQLAlchemy             1.3.24          &lt;br&gt;
threadpoolctl          3.1.0           &lt;br&gt;
&lt;strong&gt;torch&lt;/strong&gt;                  1.7.0           &lt;br&gt;
torchelastic           0.2.1           &lt;br&gt;
torchvision            0.8.0           &lt;br&gt;
tqdm                   4.46.0          &lt;br&gt;
traitlets              5.0.5           &lt;br&gt;
traits                 6.3.2           &lt;br&gt;
typing-extensions      3.7.4.3         &lt;br&gt;
urllib3                1.25.8          &lt;br&gt;
wcwidth                0.2.5           &lt;br&gt;
wheel                  0.34.2          &lt;br&gt;
wrapt                  1.14.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;彩蛋&#34;&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;该镜像已内置ssh-server服务，可直接利用vscode实现远程镜像开发和调试&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动容器，指定端口（如8088）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --gpus all -it --rm -p 8088:22 mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在容器console中启动ssh服务：&lt;code&gt;/etc/init.d/ssh restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在VScode中的remote config文件新增Host， 添加对应IP、用户名、端口即可（&lt;a href=&#34;https://chenfei-ye.github.io/post/202206_dockerfile_all/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点此参考具体细节&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;容器的管理员密码：&lt;code&gt;mindsgo123&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>神经纤维格式转换：tck转trk</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_tck2trk/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_tck2trk/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MRtrix3&lt;/code&gt;输出的tck神经纤维文件，需要转换成&lt;code&gt;TrackVis&lt;/code&gt;能识别的trk格式&lt;/p&gt;
&lt;h2 id=&#34;python实现&#34;&gt;Python实现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python

import json
import nibabel as nib
from nibabel.streamlines import Field
from nibabel.orientations import aff2axcodes


def main():

    tck_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.tck&amp;#39;
    anatomy_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/bundle_segmentations/CC.nii.gz&amp;#39;
    trk_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.trk&amp;#39;

    nii = nib.load(anatomy_file)

    header = {}
    header[Field.VOXEL_TO_RASMM] = nii.affine.copy()
    header[Field.VOXEL_SIZES] = nii.header.get_zooms()[:3]
    header[Field.DIMENSIONS] = nii.shape[:3]
    header[Field.VOXEL_ORDER] = &amp;#34;&amp;#34;.join(aff2axcodes(nii.affine))

    tck = nib.streamlines.load(tck_file)
    nib.streamlines.save(tck.tractogram, trk_file, header=header)

        
if __name__ == &amp;#39;__main__&amp;#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R常见统计模型使用</title>
      <link>https://chenfei-ye.github.io/zh/post/202205_r_statistics/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202205_r_statistics/</guid>
      <description>&lt;p&gt;数据描述：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;summary(A) psych::describe(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直方图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hist(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;概率密度图density plot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hist(A,prob=TRUE) lines(density(A, bw=&amp;quot;SJ&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;累计分布图CDF：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot(ecdf(A), do.points=FALSE, verticals=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拟合同参数高斯分布的CDF：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lines(x, pnorm(x, mean=mean(A), sd=sqrt(var(A))), lty=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;双样本检验&lt;/p&gt;
&lt;p&gt;经典的two-sample t-test：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t.test(A, B, var.equal=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不满足同方差，则用 Welch modified two-sample t-test :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res=t.test(A, B) res$p.val
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检验同方差的方法可用F-test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var.test(A, B)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不满足正态性，则用非参数检验，即two-sample Mann-Whitney test:（但是仍然assume两个分布是相似的）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wilcox.test(A, B)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果连分布也很不相似，则考虑用permutation test&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;coin::independence_test(Length ~ Hand, data = Data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是否满足正态分布，有三种方法检验：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;QQ图：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    par(pty=&amp;#34;s&amp;#34;) # arrange for a square figure region qqnorm(long) qqline(long)
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Shapiro-Wilk test：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    shapiro.test(A) # Shapiro-Wilk normality test
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Kolmogorov-Smirnov test：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    ks.test(A, &amp;#34;pnorm&amp;#34;, mean = mean(A), sd = sqrt(var(A)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;独立性检验：&lt;/p&gt;
&lt;p&gt;卡方分布有一个重要应用就是根据样本数据来检验两个分类变量的独立性，我们以CO2数据为例来说明chisq.test函数的使用，help(CO2)可以了解更多信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;data(CO2) #读入内置的数据包，其中Type和Treatmen是其中两个分类变量。 
chisq.test(table(CO2$Type,CO2$Treatment)) #检验这两个因子之间是否独立
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果显示P值为0.82，因此可以认为两因子之间独立。在样本较小的情况下，还可以使用fisher精确检验，对应的函数是&lt;code&gt;fisher.test&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proportion test&lt;/code&gt;:(在两个group的情况下，结果和卡方检验是一样的)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;library(MASS) 
table(quine$Eth, quine$Sex) 
prop.test(table(quine$Eth, quine$Sex), correct=FALSE)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ANOVA：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;anova(lm(y~x)) 
summary(aov(y~x)) # summary(aov(lm(y~x)))也是一样的结果 
summary(aov(y~x+covariate)) # ANCOVA 
summary(test)[[1]][[&amp;#34;Pr(&amp;gt;F)&amp;#34;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Post-hoc:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TukeyHSD(aov(y ~ x, data))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于ANCOVA的post hoc:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TukeyHSD(aov(y ~ x+covariate, data),which=&amp;#39;x&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果ANOVA不满足正态性，用Kruskal-Wallis非参数检验：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kruskal.test(y~x, data = df) # post-hoc for Kruskal-Wallis Test： Steel-Dwass test library(FSA) dunnTest(y~x, data=df, method=&amp;#34;bonferroni&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;多重比较校正：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ps &amp;lt;- runif(20, max=.2) 
def &amp;lt;- p.adjust(ps) 
bon &amp;lt;- p.adjust(ps, method=&amp;#34;bonferroni&amp;#34;) 
bh &amp;lt;- p.adjust(ps, method=&amp;#34;BH&amp;#34;) #Benjamini, Hochberg (1995) default fdr 
by &amp;lt;- p.adjust(ps, method=&amp;#34;BY&amp;#34;) #Benjamini, Yekutieli (2001) another fdr 
x = matrix(rnorm(10000*5),nrow=10000) 
y = matrix(rnorm(10000*5),nrow=10000) 
p = sapply(1:10000, function(i) t.test(x[i,],y[i,])$p.val) 
q = p.adjust(p, method = &amp;#34;fdr&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
