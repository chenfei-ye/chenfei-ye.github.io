[{"authors":null,"categories":null,"content":"高校青椒，致力于用影像解码人脑的奥秘。\n研究兴趣：\n神经变性病/精神疾病的影像学神经信息计算研究 神经影像人工智能临床辅助决策建模研究 人脑连接组计算方法研究 ","date":1723334400,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":1723334400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"高校青椒，致力于用影像解码人脑的奥秘。\n研究兴趣：\n神经变性病/精神疾病的影像学神经信息计算研究 神经影像人工智能临床辅助决策建模研究 人脑连接组计算方法研究 ","tags":null,"title":"叶辰飞","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://chenfei-ye.github.io/zh/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/zh/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["叶辰飞"],"categories":["公告"],"content":"服务器资源： Linux计算服务器（ssh访问） spider: 计算服务器(10.2xx.xx.140)：AMD EPYC 7642 48-Core Processor (96 threads), RTX4070 ×2, 128GB RAM, 8TB HDD；Ubuntu 22.04 OS leopard: 计算服务器(10.2xx.xx.25)：AMD EPYC 7642 48-Core Processor (96 threads), RTX4070 ×2, 128GB RAM, 8TB HDD；Ubuntu 22.04 OS wolf: 计算服务器(10.2xx.xx.25)：AMD EPYC 7642 48-Core Processor (192 threads), RTX3080Ti ×1, 128GB RAM, 8TB HDD；Ubuntu 18.04 OS Linux存储服务器（ssh访问） zebra: 存储服务器(10.2xx.xx.127)：Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz (28 threads), 64GB RAM, 250GB SSD + 87TB HDD；Ubuntu 22.04 OS hippo: 存储服务器(10.2xx.xx.70)：Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz (28 threads), 64GB RAM, 250GB SSD + 102TB HDD；Ubuntu 22.04 OS Windows服务器（remote desktop访问） I7-14700/64GB DDR5/2T SSD/8T HDD/ RTX4060 使用说明 服务器均是校园网IP，校外使用请登录学校VPN。 存储服务器只用于存放公用数据（不能跑计算），其数据存储的唯一可用空间为/data。存储服务器的存储空间已映射到计算服务器的本地路径，如/zebra，/hippo，因此可以直接从计算服务器访问存储数据。 对于计算服务器，私有数据存放在/data/目录。例如对于用户cyc，私有目录为/data/cyc。 大体量数据切勿存放在/home路径，因为根目录空间有限（对应SSD系统盘）。 请使用ssh方式连接服务器，本地客户端推荐使用tabby和winscp工具。 并行计算时，线程数不要超过逻辑CPU核数，同时警惕内存溢出。 跑计算任务，或者基于vscode/jupyter调试，务必使用tmux管理会话，以防ssh连接意外断开。具体参考这里。 python编程请用户使用各自的conda虚拟环境进行管理，装包切勿都装在base环境。具体参考这里。 对于pipeline编写和调试（尤其深度学习），建议在服务器docker容器内操作。参考Jupyter远程调试docker容器具体 及VScode远程调试docker容器。 spider目前只安装了显卡驱动，没有装cuda和cudnn。基于GPU的深度学习算法研究推荐用docker容器，可以根据需求拉取pytorch官方镜像，或者使用为师倾力打造的神经影像分析基础镜像mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:deepFS，内置python3.8 + cuda11.0.221 + cudnn8.0.3 + pytorch1.7.0 + nibabel + scikit-learn + nilearn，同时集成了ANTS，FSL6.0.4，MRtrix3.0.2，c3d，freesurfer7.3.2等常用软件。 目前zebra服务器空间比较紧张，数据优先在hippo服务器存储。 Updated 2024-08 机房停电后服务器重启，若出现docker镜像丢失、存储服务器挂载路径失效等问题，请联系管理员。 使用rm命令删文件前，三思后再执行。原则上存储服务器的数据不要做任何删除操作。若出现重要数据误删，后果自负。 Linux计算服务器的coding，若涉及可视化，优先用jupyter；否则优先用vscode remote。 使用matlab，优先用Windows服务器。 一些简单的常用命令 查看当前CPU和内存状态： htop\n查看硬盘信息： df -h\n查看硬盘挂载： lsblk\n查看当前Docker镜像: docker images\n查看正在运行的Docker容器： docker ps\n进入Docker容器进行调试： docker run -it --rm --gpus all --name deepFS -v \u0026lt;localpath\u0026gt;:/dataio mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:deepFS\n进入已经运行的Docker容器： docker exec -it docker_container bash\n查看显卡运行状态用命令： nvidia-smi -l 2\n创建名为freesurfer的tmux新会话： tmux new -s freesurfer\n退出当前tmux会话： 同时按住ctrl和b，松开再按d\n进入后台中名为freesurfer的tmux会话： tmux a -t freesurfer\n后台中的tmux会话： tmux ls\n停止后台中名为freesurfer的tmux会话： tmux kill-session -t freesurfer\n使用ssh将远程的校园网登录网址映射到本地:\n# 本地运行下面代码将服务器的校园网映射到本地8088端口 ssh -N -f -L localhost:8088:10.248.98.2:80 用户名@服务器IP # 在本地浏览器输入下面的网址来登录8088端口并登陆即可使得服务器成功访问校园网 http://localhost:8088/srun_portal_pc?ac_id=1\u0026amp;theme=basic2 计算服务器已安装软件： tmux MRtrix3 docker conda 计算服务器如何启用jupyter编程： 以下命令可能需要sudo权限。\n创建自己的conda环境 sudo apt install jupyter-notebook # 以ole为例 sudo conda create -n ole python=3.10 # 若报错command not found，需要添加conda的绝对路径。 # 查看绝对路径： which conda 激活zyx环境 conda activate ole # 如果报错conda: error: argument COMMAND: invalid choice: \u0026#39;activate\u0026#39; # 则重新初始化conda: conda init 将当前conda环境添加进jupyter kernel pip install notebook ipykernel -i https://pypi.tuna.tsinghua.edu.cn/simple python -m ipykernel install --user --name ole # 以上实现了jupyter kernel的环境添加，只需要操作一次即可 验证获取服务器的jupyter可用端口： jupyter notebook 根据提示获知可用端口，如8888，然后ctrl+C退出。\n打开windows自带的powershell，新建端口转发的ssh通道。 # 以下在windows powershell中执行 # 8000是本地端口，8888是远程jupyter端口（根据上一步获取的实际可用端口做修改） # remote_server_ip改成服务器真实IP ssh -L 8000:localhost:8888 用户名@服务器IP 进入编程目录（自行指定），启动jupyter会话 tmux new -s jupyter_ole # 新建tmux会话，保持后台运行 cd \u0026lt;编程目录\u0026gt; jupyter notebook 此时会生成IP，如：http://localhost:8888/tree?token=XXXXXXXXX 把其中8888端口替换成本地端口8000即可，本地浏览器键入IP实现访问。\n新建conda环境对应的ipykernel，即可使用。如果访问不了，需要换新的本地端口重新尝试，如8001。 ","date":1723334400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1723334400,"objectID":"b1e611313be60246c5ca6e6441b8fca7","permalink":"https://chenfei-ye.github.io/zh/post/202309_cyelab/","publishdate":"2024-08-11T00:00:00Z","relpermalink":"/zh/post/202309_cyelab/","section":"post","summary":"请务必按照规范，合理使用服务器资源","tags":["lab"],"title":"BrainNet实验室内网服务器使用说明","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"rs-fMRI预处理全流程 前提： 输入数据须整理为BIDS格式 示例：BIDS根目录为/bids_root\n1. freesurfer批处理 # 镜像路径：https://github.com/chenfei-ye/BIDS-freesurfer docker run -it --rm -v /bids_root:/bids_dataset \\ -v /bids_root/derivatives/freesurfer:/outputs \\ -v /freesurfer_license.txt:/license.txt bids-freesurfer:latest \\ /bids_dataset /outputs participant \\ --license_file \u0026#34;/license.txt\u0026#34; --skip_bids_validator freesurfer_license.txt可以点此下载。 若运行后提示pybids报错，则需要手动指定被试--participant_label [str] 检查输出结果是否完整：\ndocker run -it --rm --entrypoint python -v /bids_root:/bids_dataset bids-freesurfer:latest /output_qc.py /bids_dataset -mode freesurfer 2. fmriprep批处理 docker run -it --rm -v /bids_root:/bids_dataset \\ -v /freesurfer_license.txt:/opt/freesurfer/license.txt \\ -v /bids_root:/working_dir nipreps/fmriprep:latest \\ /bids_dataset /bids_dataset/derivatives/fmriprep participant \\ --skip-bids-validation --ignore fieldmaps \\ --md-only-boilerplate --output-spaces MNI152NLin2009cAsym:res-2 T1w \\ --nthreads 20 --stop-on-first-crash --mem_mb 5000 \\ --use-syn-sdc --fd-spike-threshold 0.5 -v -w /working_dir --cifti-output 指定/working_dir是为了将中间文件缓存到硬盘，否则内存容易爆掉；运行完毕后建议删除以节省空间； --cifti-output 是为了输出cifti结果，便于xcp-d处理； --nthreads及--mem_mb根据实际服务器资源来确定计算的线程及内存； --fs-subjects-dir指定已经处理完毕的freesurfer分割输出结果； --output-spaces输出空间增加T1w是为了后续可能用到的皮层ciftify分析； 如果提示metadata找不到TotalReadoutTime，则需要在json文件中手动补充该字段； 如果提示metadata找不到PhaseEncodingDirection，则需要在json文件中手动补充该字段；如果已存在该字段仍报错，则有可能BIDS根目录中存在被试缺少必要的T1w或BOLD数据，要仔细检查。 检查输出结果是否完整：\ndocker run -it --rm --entrypoint python -v /bids_root:/bids_dataset bids-freesurfer:latest /output_qc.py /bids_dataset -mode fmriprep 3. xcp-d批处理 docker run --rm -it -v /bids_root/derivatives/fmriprep:/fmriprep:ro \\ -v /bids_root/derivatives/wkdir:/work:rw \\ -v /bids_root/derivatives/xcp_d:/out:rw \\ -v /atlases/TEMPLATEFLOW_HOME:/home/xcp_d/.cache/templateflow \\ -v /atlases:/fs_license pennlinc/xcp_d:latest \\ /fmriprep /out participant --cifti --despike --head_radius auto \\ -w /work --nthreads 10 --mem_gb 10 --fd-thresh 0 \\ --nuisance-regressors 36P --fs-license-file /fs_license/freesurfer_license.txt \\ --min-coverage 0.2 --stop-on-first-crash \\ --atlases 4S156Parcels 4S256Parcels 4S456Parcels 4S1056Parcels HCP xcp-d pipeline优势：数据可以自动预处理并使用NiPrep风格的容器化代码，在BIDS格式下从原始数据一直分析到功能连接矩阵（也包括BOLD信号、ALFF、REHO等）。XCP-D 正好在 fMRIPrep 结束的地方接手，直接使用 fMRIPrep 的输出。XCP-D 利用 BIDS 和 NiPreps 框架自动生成去噪的 BOLD 图像、分割的时间序列、功能连接矩阵和质量评估报告。XCP-D 还可以处理来自以下来源的输出：NiBabies、ABCD-BIDS、最小预处理的 HCP 数据以及英国生物银行数据。 目前组里的服务器装的是pennlinc/xcp_d:7.3.0版本，可以用这一版跑。 4S图谱：The 4S atlas combines the Schaefer 2018 cortical atlas at 10 different resolutions (100, 200, 300, 400, 500, 600, 700, 800, 900, and 1000 parcels) with the CIT168 subcortical atlas, the Diedrichson cerebellar atlas, the HCP thalamic atlas, and the amygdala and hippocampus parcels from the HCP CIFTI subcortical parcellation. 4S图谱里的非皮层结构过于复杂，可以无视；如果需要皮层下结构，直接用HCP CIFTI subcortical parcellation就可以，和FreeSurfer定义的皮层下图谱的结构是一致的。适用于Enigma-toolbox的可视化。Enigma-toolbox的皮层下可视化结构：Subcortical input values are ordered as follows: left-accumbens, left-amygdala, left-caudate, left-hippocampus, left-pallidum, left-putamen, left-thalamus, left-ventricles, right-accumbens, right-amygdala, right-caudate, right-hippocampus, right-pallidum, right-putamen, right-thalamus, right-ventricles! You can re-order your subcortical dataset using our reorder_sctx() function. *Ventricles are optional. --fd-thresh 0：不执行censoring,否则会丢失帧； 对于--cifti，需要fmriprep里预存fsLR的图谱才可以跑。fmriprep参数加--cifti-output，默认是91k皮层。对于nifti输出结果，很可能有脑区的值是NaN，可以保留NaN进行后续的计算。讨论参考； /TEMPLATEFLOW_HOME是templateflow的本地路径，是为了预加载已下载的templateflow图谱，否则每次容器运行时会从s3.amazon新下载templateflow图谱，速度很慢。templateflow图谱也可在网盘下载：链接：https://pan.baidu.com/s/13bPkN3Vzcyy6LoSwB7UQKg?pwd=9h4i ；提取码：9h4i 对于脑区水平的BOLD信号和FC计算，xcp-d不推荐做平滑，原因是：Smoothing improves SNR in a given voxel by blurring the signal across voxels, but when you are averaging the signal in an ROI, there’s no reason to do that, since you’re not interested in individual voxels. Smoothing before parcellating could, at worst, blur signals from voxels outside the region into the region. yeo-7和yeo-17的脑区空间定义是一样的，只是同一个脑区不一定对应到一个子网络上。具体对应关系见此； 对于Minimally preprocessed HCP数据的预处理（输入数据需要同时用到subid_3T_rfMRI_REST1_preproc.zip 和subid_3T_Structural_preproc.zip）： 检查输出结果是否完整：\ndocker run -it --rm --entrypoint python -v /bids_root:/bids_dataset bids-freesurfer:latest /output_qc.py /bids_dataset -mode xcp-d ","date":1717632000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1717632000,"objectID":"dfbb91425ef00f930786b1f240ef6968","permalink":"https://chenfei-ye.github.io/zh/post/202406_rs_fmri_run/","publishdate":"2024-06-06T00:00:00Z","relpermalink":"/zh/post/202406_rs_fmri_run/","section":"post","summary":"freesurfer+fmriprep+xcp-d","tags":["lab"],"title":"rs-fMRI预处理全流程","type":"post"},{"authors":["Yanwu Yang","叶辰飞","Guinan Su","Ziyao Zhang","Zhikai Chang","Hairui Chen","Piu Chan","Yue Yu","Heather Ting Ma"],"categories":null,"content":"","date":1713744000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1713744000,"objectID":"f5ec1bd0191182850eafdfd69e7cb0eb","permalink":"https://chenfei-ye.github.io/zh/publication/j_2024_j_brainmass/","publishdate":"2024-04-22T00:00:00Z","relpermalink":"/zh/publication/j_2024_j_brainmass/","section":"publication","summary":"本文提出了BrainMass框架，用于通过掩码建模和特征对齐进行大脑网络的自监督学习。BrainMass采用掩码-感兴趣区域建模（MRM）来加强网络内部依赖性和区域特异性。","tags":[],"title":"BrainMass: Advancing Brain Network Analysis for Diagnosis with Large-scale Self-Supervised Learning","type":"publication"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"可视化： surfplot提供了脑图可视化方法，基于brainspace开发实现。\n针对Yeo脑网络的可视化参考示例\n依赖提示：建议运行环境预装wb_command并写入环境变量。\n如何可视化NIFTI：surfplot默认仅支持GIFTI或CIFTI的皮层染色。对于NIFTI文件，需要neuromap实现空间转换，参考：\n已知坑1：远程服务器安装surfplot后，如果jupyter可视化出现内核挂掉的错误，大概率来源于brainspace中vtk的问题，须参考官方解决方案重装vtk。\nfrom neuromaps.datasets import fetch_fslr from surfplot import Plot from neuromaps import transforms gii_lh, gii_rh= transforms.mni152_to_fslr(nifti_file_path_in_MNI152_space, \u0026#39;32k\u0026#39;) surfaces = fetch_fslr() lh, rh = surfaces[\u0026#39;inflated\u0026#39;] p = Plot(lh, rh, layout = \u0026#39;row\u0026#39;, size = (1000, 400), zoom = 1.2) p.add_layer({\u0026#39;left\u0026#39;: gii_lh, \u0026#39;right\u0026#39;: gii_rh}, cbar=True) fig = p.build() fig.show() 梯度分析 brainspace，一个Python/Matlab工具箱，用于(i)识别梯度，(ii)梯度对齐，(iii)梯度可视化。BrainSpace还可以对梯度与其他大脑特征之间的关联进行控制研究，生成空模型，以解释空间自相关性。验证实验证明了该工具在分析不同空间尺度上的功能和微观结构梯度时的实用性和一致性。\n已知坑1：brainspace对于大矩阵计算（如10K节点）的运算时间会很慢，建议按此方案手动修正源代码从而提速。 ","date":1708214400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1708300800,"objectID":"4a1b13c289ca48b67d235695b8ec3866","permalink":"https://chenfei-ye.github.io/zh/post/202402_surfplot_brainspace/","publishdate":"2024-02-18T00:00:00Z","relpermalink":"/zh/post/202402_surfplot_brainspace/","section":"post","summary":"谨防踩坑","tags":["python"],"title":"利用Surfplot和Brainspace进行脑图可视化","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"解决 import nilearn.plotting as pl import nibabel as nib labels_img = nib.load(\u0026#39;/data/cye_code/BIDS-fmripost/atlases/AAL1PD25_MNI.nii.gz\u0026#39;) coords = pl.find_parcellation_cut_coords(labels_img) np.savetxt(\u0026#34;/data/cye_code/BIDS-fmripost/atlases/coords.csv\u0026#34;, coords.astype(int), delimiter=\u0026#34;,\u0026#34;) ","date":1708128000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1708128000,"objectID":"a2dd31970a99a720a71c8a3730d56d19","permalink":"https://chenfei-ye.github.io/zh/post/202402_label_coord/","publishdate":"2024-02-17T00:00:00Z","relpermalink":"/zh/post/202402_label_coord/","section":"post","summary":"nilearn一步实现","tags":["python"],"title":"如何提取脑图谱/脑区label文件的中心坐标","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"解决 # add a launch configuration \u0026#34;justMyCode\u0026#34;:false` See code.visualstudio.com/docs/python/debugging#_justmycode\n","date":1707955200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1707955200,"objectID":"845507651dec33820f02e39efe74de51","permalink":"https://chenfei-ye.github.io/zh/post/202402_vscode_debug/","publishdate":"2024-02-15T00:00:00Z","relpermalink":"/zh/post/202402_vscode_debug/","section":"post","summary":"debug时直接跳过断点？","tags":["python"],"title":"VSCode在debug时无法设置第三方包函数断点的问题","type":"post"},{"authors":["叶辰飞"],"categories":["公告"],"content":"问题： 前几天连接服务器时一切正常 今天连接服务器时突然显示The remote host may not meet VS Code Server’s prerequisites for glibc and libstdc++ 最后发现是VSCode更新版本后提高了对服务器版本的要求（新版的VSCode要求glibc\u0026gt;=2.28），而服务器端Ubuntu 18.04版本的glibc=2.27。 解决 卸载本机VSCode，下载并安装1.85版的VSCode，并关闭VSCode自动更新，参考。 在VSCode插件商城中重装remote-ssh插件。 大功告成。 ","date":1707177600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1707177600,"objectID":"8e012fcc13f718a373f58e6d15296991","permalink":"https://chenfei-ye.github.io/zh/post/202402_vscode_upgrade/","publishdate":"2024-02-06T00:00:00Z","relpermalink":"/zh/post/202402_vscode_upgrade/","section":"post","summary":"The remote host may not meet VS Code Server‘s prerequisites for glibc and libstdc++","tags":["lab"],"title":"VSCode连接服务器失败的问题","type":"post"},{"authors":["叶辰飞"],"categories":["公告"],"content":"服务器资源： penguin: 计算服务器(81.xx.xx.124)：AMD EPYC™ Milan(2.55GHz/3.5GHz） (64 threads), 128GB RAM, 2TB HDD；256TB 对象存储COS; Ubuntu 18.04 OS 使用说明 服务器购买自腾讯云，公网IP。 此台服务器没有显卡，没有显卡，没有显卡。 用户私有数据存放在/workspace目录。例如对于用户zyx，私有目录为/workspace/zyx。 大体量数据可存储在对象存储COS，路径在/data/。 请使用ssh方式连接服务器，本地客户端推荐使用tabby和winscp工具。有使用GUI需求时可联系为师。 查看系统CPU运行状态用命令htop。并行计算时，线程数不要超过逻辑CPU核数（64 threads），同时警惕内存溢出。 跑任务，或者基于vscode/jupyter debug，请使用tmux管理会话。具体参考这里。 python编程请用户使用各自的conda虚拟环境进行管理，装包切勿都装在base环境。具体参考这里。 对于pipeline编写和调试（尤其深度学习），建议在服务器docker容器内操作。参考Jupyter远程调试docker容器具体 及VScode远程调试docker容器。 神经影像分析基础镜像mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:deepFS，内置python3.8 + cuda11.0.221 + cudnn8.0.3 + pytorch1.7.0 + nibabel + scikit-learn + nilearn，同时集成了ANTS，FSL6.0.4，MRtrix3.0.2，c3d，freesurfer7.3.2等常用软件。 # 调用命令示例： docker run -it --rm --name deepFS \\ -v \u0026lt;localpath\u0026gt;:/dataio \\ mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:deepFS penguin已安装软件： tmux MRtrix3 docker conda penguin如何启用jupyter编程： 创建自己的conda环境 # 以zyx为例 /opt/miniconda3/bin/conda init bash ### 根据提示，可能需要reopen一个新的终端生效配置，再执行后续命令 conda create -n zyx python=3.8 激活zyx环境 conda activate zyx #若提示权限问题，可使用chmod命令来更改权限 将当前conda环境添加进jupyter kernel pip install ipykernel -i https://pypi.tuna.tsinghua.edu.cn/simple python -m ipykernel install --name zyx 以上实现了jupyter kernel的环境添加，只需要操作一次即可。后续每次编程只需要启动jupyter会话即可。 验证获取服务器的jupyter可用端口： jupyter notebook --config /root/.jupyter/jupyter_notebook_config.py --allow-root 根据提示获知可用端口，如8888，然后ctrl+C退出。鉴于服务器是公网IP，需要使用端口转发，建议打开windows自带的powershell，新建端口转发的ssh通道。为保证会话进程在后台始终活跃，建议使用tmux进程管理jupyter后台：\n# 以下在windows powershell中执行，以zyx用户为例 # 8000是本地端口，8888是远程jupyter端口（根据上一步获取的实际可用端口做修改） # remote_server_ip改成服务器真实IP ssh -L 8000:localhost:8888 zyx@remote_server_ip # 新建tmux会话，以zyx用户为例 tmux new -s jupyter_zyx 进入编程根目录（自行指定） cd /data/zyx 启动jupyter会话 jupyter notebook --config /root/.jupyter/jupyter_notebook_config.py --allow-root 此时会生成IP，如：http://127.0.0.1:8888/tree?token=5d3dfa55f08fa4e4c2f4a7f217fe0f64c135c73f7bd4e6ea 把其中端口8888替换成本地端口即可（8000），本地浏览器键入IP实现访问。\n如果访问不了，需要换新的本地端口重新尝试，如8001。如果可以正常访问，后续可以通过tmux会话管理jupyter后台，如重新切入到已有tmux 会话： tmux a -t jupyter_zyx 只要jupyter后台持续活跃，理论上就可以网页访问jupyter。\n新建conda环境（如zyx）对应的ipykernel，即可使用。 ","date":1701561600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1705363200,"objectID":"e3d0b19e58bc35201b641e37922237dd","permalink":"https://chenfei-ye.github.io/zh/post/202401_penguin/","publishdate":"2023-12-03T00:00:00Z","relpermalink":"/zh/post/202401_penguin/","section":"post","summary":"请务必按照规范，合理使用Penguin服务器资源","tags":["lab"],"title":"公有云服务器使用说明（Penguin）","type":"post"},{"authors":["叶辰飞","Tao Wu","Andreia V. Faria"],"categories":null,"content":"","date":1700611200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1700611200,"objectID":"c2b584e6d1473c6be12b41b8f0a71fe9","permalink":"https://chenfei-ye.github.io/zh/publication/j_2023_j_front/","publishdate":"2023-11-22T00:00:00Z","relpermalink":"/zh/publication/j_2023_j_front/","section":"publication","summary":"本文综述了人脑连接组关联研究（CWAS）在神经退行疾病的前沿问题，并总结了特刊的最新文献。","tags":[],"title":"Editorial: Advances in Connectome-Wide Association Studies (CWAS) Along the Neurodegeneration Trajectory","type":"publication"},{"authors":["叶辰飞"],"categories":["公告"],"content":"1. 人脑影像功能动态分析计算方法 近二十年来，静息态(resting-state, RS)功能磁共振成像(fMRI)为自发大脑活动的时空组织带来了新的曙光。RS波动的丰富和复杂结构可以用不同的脑网络(resting-state networks, RSNs)来描述，这是由一组分布脑区的相干波动引起的。通常，在6分钟或更长时间的整个RS扫描中计算空间位置之间的统计相互依赖关系；Pearson相关系数是最常用的功能连接(functional connectivity, FC)指标。\n最近，FC被证明随着时间的推移而波动，这意味着在整个RS扫描上假设平稳性的测量可能过于简单，无法捕获RS活动的全部程度。自这些初步发现以来，随后的研究迅速蓬勃发展，以研究所谓的动态功能连接(dynamic FC, dFC)，试图以有意义的方式解析RS的dFC已经在一系列方法学变体中展开。除了作为各种脑部疾病生物标志物的潜力，dFC对神经疾病的直接治疗应用也可以预见。在此背景下，通过dFC方法追踪大脑功能动力学作为一种有吸引力的工具脱颖而出。此外，调节活动或连接的动态特征也可能被证明是治疗大脑动力学受到特别阻碍的疾病的有效策略。\n本研究方向偏磁共振影像计算，将聚焦于人脑静息态功能磁共振影像的动态分析算法研究。目前组内已有1名博士生在研。\n参考文献：\nPreti MG, Bolton TA, Van De Ville D. The dynamic functional connectome: State-of-the-art and perspectives. Neuroimage. 2017 Oct 15;160:41-54. doi: 10.1016/j.neuroimage.2016.12.061. Epub 2016 Dec 26. PMID: 28034766. Long Y, Cao H, Yan C, et al. Altered resting-state dynamic functional brain networks in major depressive disorder: Findings from the REST-meta-MDD consortium. Neuroimage Clin. 2020;26:102163. doi: 10.1016/j.nicl.2020.102163. Epub 2020 Jan 7. PMID: 31953148; PMCID: PMC7229351. Spencer APC, Goodfellow M. Using deep clustering to improve fMRI dynamic functional connectivity analysis. Neuroimage. 2022 Aug 15;257:119288. doi: 10.1016/j.neuroimage.2022.119288. Epub 2022 May 10. PMID: 35551991. 2. 脑影像神经集群建模及脑疾病应用 使用非线性动态系统理论模型对大尺度大脑活动进行建模，可以将来自多种模式的实验数据整合到一个通用框架中，从而促进对神经认知功能和病变的预测。有证据表明，神经元集群的非线性动态是适应性皮层活动的核心。同样，异常的动态过程似乎是许多大脑疾病的基础。\n神经集群建模（Neural Mass Model, NMM） 描述了一个局部群体的相互作用的神经元，如锥体和抑制细胞。但局域群体和支持大脑功能的大尺度系统之间仍然存在几个数量级。通过将一系列NMM耦合到介观和宏观环路，可以搭建起大尺度的脑动力学模型。 每个神经元群体节点(即每个 NMM)内的动态因此反映了局部群体活动加上来自远端区域(其他节点)和随机波动的影响。这种大尺度的脑网络模型是一个多尺度的系综的系综，在不同的尺度上有不同的组织规则。\n将NMM耦合成更大的系统需要依靠解剖连接，即连接组。对于人脑，磁共振DTI成像可以提供解剖连接，磁共振fMRI成像可以表征脑功能活动。由此得到的全脑动力学模型在网络节点间的传导时延、混沌或随机动力学的模式仍有待厘清。\n本研究方向偏动力学分析计算（模拟仿真），将聚焦于基于人脑复杂网络NMM的神经动力学特征及其在神经系统疾病上的机制探索和临床应用。目前组内已有1名硕士生在研。\n参考文献：\nBreakspear M. Dynamic models of large-scale brain activity. Nat Neurosci. 2017 Feb 23;20(3):340-352. doi: 10.1038/nn.4497. PMID: 28230845. El Houssaini K, Bernard C, Jirsa VK. The Epileptor Model: A Systematic Mathematical Analysis Linked to the Dynamics of Seizures, Refractory Status Epilepticus, and Depolarization Block. eNeuro. 2020 Mar 24;7(2):ENEURO.0485-18.2019. doi: 10.1523/ENEURO.0485-18.2019. PMID: 32066612; PMCID: PMC7096539. 3. 人脑多模态影像的低维嵌入表征方法 如何利用多模态神经影像数据解析人脑极其复杂的功能机制、形成明确疾病早期标志物成为了推动脑医学前沿的重大难题。造成这种困局的主要原因包括： (1)脑磁共振影像数据具有高维异构的特点，计算复杂性高，影像特征提取困难；(2)脑磁共振影像模态融合难。已有的绝大部分研究往往只使用了单模态脑影像（对应MRI单序列扫描数据），难以将散乱在影像中的人脑信息集成一个能描述神经异常病变的全景图，而近年来出现模态融合方法大多仍停留在特征融合层面，无法有效捕捉模态间完整的互补信息；(3)疾病分类模型普遍泛化性低。已有的影像分析算法未能有效地将众多的多中心小样本脑影像数据整合成一个有效的大数据集进行分析，未能突破脑影像小样本造成的学习算法低泛化能力的问题，仍然需要新的计算方法才能逐步推向临床应用。\n简单汇聚单模态特征应用整个多模态特征集构建是低效的，所以如何捕捉各模态之间进行深度交互以丰富疾病表征尤为重要。近年来，结合深度学习技术和多模态磁共振影像技术研究构建脑疾病自动分类模型也逐渐兴起。深度学习区别于机器学习，更擅长于编码高度非线性特征，并且基于数据驱动的特点，使得模型的特征不仅仅局限于手动提取或者非线性分析方法提取的特征，更是可以通过多层非线性表达编码更为抽象的表征。其中的代表性工作是BrainGNN：提出了基于ROI启发的图卷积层和池化层，通过任务对于ROI的启发和敏感性来实现对脑区特征的特异性编码，并且基于该方法可以有效找到与疾病相关的生物标志物，具有群体分析和个体分析的重要特性。\n本研究方向偏人工智能算法，将聚焦于基于人脑网络的图神经网络（GNN）学习，实现脑影像低维嵌入表征。目前组内已有2名博士生在研。\n参考文献：\nSchneider S, Lee JH, Mathis MW. Learnable latent embeddings for joint behavioural and neural analysis. Nature. 2023 May;617(7960):360-368. doi: 10.1038/s41586-023-06031-6. Epub 2023 May 3. PMID: 37138088; PMCID: PMC10172131. Kim JH, Zhang Y, Han K, Wen Z, Choi M, Liu Z. Representation learning of resting state fMRI with variational autoencoder. Neuroimage. 2021 Nov 1;241:118423. doi: 10.1016/j.neuroimage.2021.118423. Epub 2021 Jul 23. PMID: 34303794; PMCID: PMC8485214. Yang Y, Ye C, Guo X, Wu T, Xiang Y, Ma T. Mapping Multi-modal Brain Connectome for Brain Disorder Diagnosis via Cross-modal Mutual Learning. IEEE Trans Med Imaging. 2023 Jul 13;PP. doi: 10.1109/TMI.2023.3294967. Epub ahead of print. PMID: 37440391. 4. 神经调控下的脑影像标志物挖掘 深脑电刺激（deep brain stimulation, DBS）是帕金森病等多种神经退行疾病的主要干预手段，自上世纪80 年代开始应用于临床，2002年获得美国FDA批准，30多年来全球有超过30万人接受了该疗法。然而其临床疗效的普适性不强、刺激参数优化方式低效、长期慢性刺激容易产生不良作用。临床困境的背后是DBS作用机制不清。目前的主流观点认为DBS 不仅在局部刺激靶区发挥作用，而且在全脑范围内通过涉及运动控制的功能连接脑区产生广泛分布的脑网络效应。然而其具体机制仍未阐明，严重限制了DBS手术方案的精准优化。因此，如何研究模拟帕金森病（PD）患者人脑连接组的功能损伤和刺激响应，是DBS干预方案个体调控精准化的重要发展趋势，也成为了功能神经外科的迫切临床需求。DBS在功能失调的神经回路中放置一个电极来提供电刺激，以抑制异常的活动和驱动一个不活跃的网络。尽管DBS优势明显，但它的治疗作用机制仍不完全清楚。\n神经影像学研究，旨在将行为的变异与大脑的变化联系起来。磁共振成像（MRI）自上世纪90年代初被发现以来，已成为实现这一目标最有效的方法之一。作为一种探测全脑活动的非侵入性工具，功能磁共振成像fMRI能够研究复杂的人脑活动过程及其在不同时空域的功能整合和分离，因此基于fMRI影像的人脑连接组自动重建、分析与功能信息解码研究十分关键。如何在DBS外部刺激过程中对人脑fMRI信号进行有效处理并挖掘疾病标志物，对患者大脑的功能障碍解码与症状康复预测具有重要意义。\n本研究方向偏磁共振影像计算，将聚焦于DBS作用机制相关的多模态MRI影像标志物挖掘方法研究。目前组内已有1名博士生在研。本项目与上海交通大学瑞金医院团队合作开展\n参考文献：\nChu C, He N, Zeljic K, Zhang Z, Wang J, Li J, Liu Y, Zhang Y, Sun B, Li D, Yan F, Zhang C, Liu C. Subthalamic and pallidal stimulation in Parkinson’s disease induce distinct brain topological reconstruction. Neuroimage. 2022 Jul 15;255:119196. doi: 10.1016/j.neuroimage.2022.119196. Epub 2022 Apr 9. PMID: 35413446. https://www.cn-healthcare.com/articlewm/20221210/content-1481552.html Zhao S, Li G, Tong C, Chen W, Wang P, Dai J, Fu X, Xu Z, Liu X, Lu L, Liang Z, Duan X. Full activation pattern mapping by simultaneous …","date":1695600000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1695600000,"objectID":"6c8e0a76e278789eb2f8cd2fd43af31b","permalink":"https://chenfei-ye.github.io/zh/post/202309_gradproj/","publishdate":"2023-09-25T00:00:00Z","relpermalink":"/zh/post/202309_gradproj/","section":"post","summary":"方向8选1，","tags":["lab"],"title":"电信本科毕设方向","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"vtk文件转mesh格式 安装gmsh的binary文件 https://gmsh.info/bin/Linux/ 转档 # 方式1 gmsh -3 -o .msh # 方式2 gmsh -3 -save 本地安装gmsh GUI软件打开验证 其实也可以用gmsh GUI直接转档\n注意：容器系统环境可能需要安装libxcursor1才能支持gmsh apt install libxcursor1 ","date":1693440000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1693440000,"objectID":"29ec3b5c0d65b929a5945fc950dc6336","permalink":"https://chenfei-ye.github.io/zh/post/202308_vtk2mesh/","publishdate":"2023-08-31T00:00:00Z","relpermalink":"/zh/post/202308_vtk2mesh/","section":"post","summary":"使用gmsh软件很方便","tags":["pipeline","docker"],"title":"vtk文件转mesh格式","type":"post"},{"authors":["Li Liang","Pengzheng Zhou","叶辰飞","Qi Yang","Ting Ma"],"categories":null,"content":"","date":1684972800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1684972800,"objectID":"6f53bb0fdf9566f84bd4b352e37f6f6e","permalink":"https://chenfei-ye.github.io/zh/publication/j_2023_j_disconnectome/","publishdate":"2023-05-25T00:00:00Z","relpermalink":"/zh/publication/j_2023_j_disconnectome/","section":"publication","summary":"本文基于小血管源性白质损伤的结构连接网络时变图模型，运用具有广义Gamma混合模型先验的事件模型，在横断面多模态神经影像大数据中发现了脑小血管病（CSVD）源性节点结构网络失连接度在阿尔茨海默病疾病谱中的时空扩散机制：即CSVD源性脑白质高信号首先攻击大脑默认网络中重要的枢纽节点，包括额眶回、后扣带回和内侧颞叶皮层。","tags":[],"title":"Spatial-temporal patterns of brain disconnectome in Alzheimers disease","type":"publication"},{"authors":["Yanwu Yang","叶辰飞","Ting Ma"],"categories":null,"content":"","date":1682121600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1682121600,"objectID":"389d96e37faf6c9067c59e7e6d59b61d","permalink":"https://chenfei-ye.github.io/zh/publication/j_2023_j_nn/","publishdate":"2023-04-22T00:00:00Z","relpermalink":"/zh/publication/j_2023_j_nn/","section":"publication","summary":"本文提出了一个基于多元距离的脑连接组深度网络(MDCN)，该网络通过有效的分组学习来解决局部特异性问题，并将种群和分组依赖关系关联起来以映射个体差异。实验证明MDCN在疾病分类和可解释方面的优势，该方法有效融合了CWAS和图神经网络，并为人脑连接组关联研究提供新的见解。","tags":[],"title":"A deep connectome learning network using graph convolution for connectome-disease association study","type":"publication"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"FastSurfer -\u0026gt; 全脑分割 https://deep-mi.org/research/fastsurfer/ FastSurfer is a fast and extensively validated deep-learning pipeline for the fully automated processing of structural human brain MRIs. As such, it provides FreeSurfer conform outputs, enables scalable big-data analysis and time-critical clinical applications such as structure localization during image acquisition or extraction of quantitative measures.\n# 完整分割（GPU） docker run --gpus all -v /data/mg_data/mnt/bl_test/input:/data -v /data/mg_data/mnt/bl_test/fastsf_output:/output -v /data/freesurfer:/fs_license --rm deepmi/fastsurfer:gpu-v1.1.1 --fs_license /fs_license/freesurfer_license.txt --t1 /data/t1.nii --sid subject2 --sd /output --parallel # DKT Lookup table 31和63作为脉络丛会被分割出来，应该当做LV，对应4和43 77作为WMH，没有区分左右，不便合并 SynthSeg -\u0026gt; 全脑分割，计算ICV https://github.com/BBillot/SynthSeg https://surfer.nmr.mgh.harvard.edu/fswiki/SynthSeg SynthSeg 可不依赖GPU，实测CPU多线程计算约2分钟内完成\n# 分割 （完整） mri_synthseg --i /dataio/t1.nii --parc --robust --vol /dataio/vol.csv --qc /dataio/qc.csv --threads 172 --o /dataio/t1_seg.nii.gz # 注意 --resample如果输入本身是1mm iso，则不会生成resample图像 SynthStrip -\u0026gt; 剥头皮 https://surfer.nmr.mgh.harvard.edu/docs/synthstrip/ SynthStrip is a skull-stripping tool that extracts brain signal from a landscape of image types, ranging across imaging modality, contrast, resolution, and subject population. It leverages a deep learning strategy that synthesizes arbitrary training images from segmentation maps to optimize a robust model agnostic to acquisition specifics. https://doi.org/10.1016/j.neuroimage.2022.119474\n# 自动去头皮（多模态泛化性优秀），1分钟以内 mri_synthstrip -i /dataio/t1.nii -o /dataio/t1_bet.nii -m /dataio/t1_mask.nii sbTIV-\u0026gt; 计算ICV https://freesurfer.net/fswiki/Samseg https://freesurfer.net/fswiki/sbTIV Total intracranial volume (TIV/ICV) is an important covariate for volumetric analyses of the brain and brain regions. It is commonly used to correct for head size variation (i.e., ’normalize’ hippocampal volume size). The gold-standard method is manual delineation of T2 scans. Freesurfer currently provides the eTIV measure, described here. It has been shown to be a robust covariate. ## 计算sbTIV (segmentation-based TIV)，大约5-10分钟 run_samseg --input /home/username/data/t1.nii --output /home/username/data/samsegOutput/ --threads 8 关于FreeSurfer图谱 DK图谱lookuptable https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT https://www.cis.jhu.edu/~parky/MRN/Desikan%20Region%20Labels%20and%20Descriptions.pdf\nDKT 图谱： https://mindboggle.readthedocs.io/en/latest/labels.html\nHCPMMP图谱 ： https://neuroimaging-core-docs.readthedocs.io/en/latest/pages/atlases.html\n","date":1678579200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1678579200,"objectID":"04d9fa2846bb47f24acbc519c02d206d","permalink":"https://chenfei-ye.github.io/zh/post/202303_parcellate/","publishdate":"2023-03-12T00:00:00Z","relpermalink":"/zh/post/202303_parcellate/","section":"post","summary":"DL大法好","tags":["pipeline","docker"],"title":"关于最近一些MRI-T1w结构像处理pipeline的测试","type":"post"},{"authors":["叶辰飞"],"categories":["数据"],"content":"CHCP-中国人脑图谱 北大高家红课题组公开，1.85 TB，365个人，西门子prisma扫描，包含基于中国人群的脑部MRI高分辨率结构影像（T1W 和 T2W）、静息态功能影像（rfMRI）、任务态功能影像（tfMRI）以及高角分辨率的扩散加权影像（dMRI），还包括相应的认知与行为数据。\nGe, J., Yang, G., Han, M. et al. Increasing diversity in connectomics with the Chinese Human Connectome Project. Nat Neurosci 26, 163–172 (2023). https://doi.org/10.1038/s41593-022-01215-1\n下载地址：https://www.chinese-hcp.cn/\nSLIM-西南大学纵向多模态大学生脑影像 数据介绍：http://fcon_1000.projects.nitrc.org/indi/retro/southwestuni_qiu_index.html\nLiu W, Wei D, Chen Q, Yang W, Meng J, Wu G, Bi T, Zhang Q, Zuo XN, Qiu J. Longitudinal test-retest neuroimaging data from healthy young adults in southwest China. Sci Data. 2017 Feb 14;4:170017. doi: 10.1038/sdata.2017.17. PMID: 28195583; PMCID: PMC5308199.\nThe data collection was initiated in November 2011 and was terminated in January 2015. using 3T Siemens Trio 包含3D-T1w/DTI/rs-fMRI\n下载方式：\n# 下载duck CLI工具，可在Linux环境安装 echo -e \u0026#34;deb https://s3.amazonaws.com/repo.deb.cyberduck.io stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/cyberduck.list \u0026gt; /dev/null sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FE7097963FEFBE72 sudo apt-get update sudo apt-get install duck # 读取亚马逊云S3的目录 duck --verbose -u anonymous --list s3:/fcp-indi/data/Projects/INDI/SLIM/RawDataTars/ # 下载tar数据到本地 duck --verbose -u anonymous --download s3:/fcp-indi/data/Projects/INDI/SLIM/RawDataTars/ ./ SALD-西南大学全生命周期横向队列脑影像 数据介绍：http://fcon_1000.projects.nitrc.org/indi/retro/sald.html\nWei D, Zhuang K, Ai L, Chen Q, Yang W, Liu W, Wang K, Sun J, Qiu J. Structural and functional brain scans from the cross-sectional Southwest University adult lifespan dataset. Sci Data. 2018 Jul 17;5:180134. doi: 10.1038/sdata.2018.134. PMID: 30015807; PMCID: PMC6049036.\n497 healthy adults (age range: 19-80 years; 308 Females, 187 Males) were recruited and completed 3D-T1w and rs-fmri (bids format) using 3T Siemens Trio\n下载方式：\n# 下载duck CLI工具，可在Linux环境安装 echo -e \u0026#34;deb https://s3.amazonaws.com/repo.deb.cyberduck.io stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/cyberduck.list \u0026gt; /dev/null sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FE7097963FEFBE72 sudo apt-get update sudo apt-get install duck # 读取亚马逊云S3的目录 duck --verbose -u anonymous --list s3:/fcp-indi/data/Projects/INDI/SALD/ # 下载tar数据到本地 duck --verbose -u anonymous --download s3:/fcp-indi/data/Projects/INDI/SALD/ ./ 北师大国重180例大学生多模态脑影像数据库 数据描述: http://fcon_1000.projects.nitrc.org/indi/retro/BeijingEnhanced.html\nThese data include 180 healthy controls from a community (student) sample at Beijing Normal University in China. Compared to the Beijing_Zang dataset in the 1000 Functional Connectomes Classic collection these data include IQ scores for a subset of participants (n=55) and a 64 directions DTI scan for all participants.\n","date":1676160000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1676160000,"objectID":"e891a3fb2e0536de03fadb147061e10d","permalink":"https://chenfei-ye.github.io/zh/post/202302_hc_cohort/","publishdate":"2023-02-12T00:00:00Z","relpermalink":"/zh/post/202302_hc_cohort/","section":"post","summary":"不定期更新","tags":["open data","MRI"],"title":"中国人脑MRI常模公开数据库","type":"post"},{"authors":["Wei C","Yang Y","Guo X","叶辰飞","Lv H","Xiang Y","Ma T"],"categories":null,"content":"","date":1663286400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1663286400,"objectID":"3b4df3263e0ac58dc6ecf66280eb7fbe","permalink":"https://chenfei-ye.github.io/zh/publication/j_2022_j_mrfnet/","publishdate":"2022-09-16T00:00:00Z","relpermalink":"/zh/publication/j_2022_j_mrfnet/","section":"publication","summary":"Super-fast human brain parcellation pipeline.","tags":[],"title":"MRF-Net: A multi-branch residual fusion network for fast and accurate whole-brain MRI segmentation","type":"publication"},{"authors":["Xutao Guo","叶辰飞","Yanwu Yang","Li Zhang","Li Liang","Shang Lu","Haiyan Lv","Chunjie Guo","Ting Ma"],"categories":null,"content":"","date":1663200000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1663200000,"objectID":"977e4c5fa55267cfcc558866c396b319","permalink":"https://chenfei-ye.github.io/zh/publication/j_2022_j_wmh_ensemble/","publishdate":"2022-09-15T00:00:00Z","relpermalink":"/zh/publication/j_2022_j_wmh_ensemble/","section":"publication","summary":"本研究提出了一种监督增广的方法，对现有的脑磁共振FLAIR影像中白质高信号病灶的分割标注使用深度贝叶斯网络进行不确定性估计，能够预测病灶边缘等模糊区域的不确定性。","tags":[],"title":"Ensemble learning  via supervision augmentation for white matter hyperintensity segmentation","type":"publication"},{"authors":["Chen Ran","Yanwu Yang","叶辰飞","Haiyan Lv","Ting Ma"],"categories":null,"content":"","date":1662940800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1662940800,"objectID":"aaaa34712fbb8f6a2ad8a4a034f75d43","permalink":"https://chenfei-ye.github.io/zh/publication/j_2022_j_hbm_brainage/","publishdate":"2022-09-12T00:00:00Z","relpermalink":"/zh/publication/j_2022_j_hbm_brainage/","section":"publication","summary":"为了增强脑龄模型的可解释性和疾病表达的特异性，本研究基于磁共振脑龄预测模型引入了Shapley 分析计算模块，将脑龄预测模型的可解释性迁移到疾病风险预测中，验证了脑龄指标对于脑健康风险的重要提示作用。本论文发表后收到同行高度关注，首三个月进入Wiley杂志社中国区同类论文下载量前五名，获得了“Wiley中国开放科学高贡献作者”荣誉。","tags":[],"title":"Brain age vector: A measure of brain aging with enhanced neurodegenerative disorder specificity","type":"publication"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"场景 上一篇写了如何使用vscode远程连接服务器的docker容器进行debug，这篇简单记录一下如何使用jupyter远程连接服务器的docker容器。\n场景： 本地win10笔记本，远程连接远程ubuntu服务器的docker容器\n使用jupyter相对于vscode的优势：\n动态笔记脚本，Markdown与code的完美结合 画图，模型训练 快速运行下载的开源ipynb文件 当然对于神经影像pipeline项目，个人更偏爱vscode去debug\n言归正传：\n一、服务器端容器设置 1、容器启动，设置端口 # 建议提前启动一个tmux窗口，防止远端服务断电断网 docker run -it --rm --gpus all -p 9999:9999 mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1 2、生成notebook 配置文件 apt-get install jupyter apt-get install ipython jupyter notebook --generate-config 3、生成密码 jupyter notebook password 此时会在/root/.jupyter/jupyter_notebook_config.json中生成密文。复制该密文，如sha1:56a8dc892ab2:239cb1f1bda7f8614e546853e8298efc566489d9\n4、修改配置文件 在/root/.jupyter/jupyter_notebook_config.py中添加这几行\nc.NotebookApp.ip=\u0026#39;*\u0026#39; c.NotebookApp.password = u\u0026#39;刚才复制的那个密文\u0026#39; c.NotebookApp.open_browser = False c.NotebookApp.port =9999 5、安装python3-dev 提前解决jupyter无法连接python3服务器内核 一直显示正在连接服务器的问题\napt-get install python3-dev 6、安装ipykernel # 将当前python环境添加进jupyter kernel pip install ipykernel python -m ipykernel install --name cye（你的环境名）` 7、启动jupyter jupyter notebook --ip=0.0.0.0 --no-browser --allow-root --port 9999 二、win10本地相关配置 假设windows环境已成功安装anaconda和jupyter\n1、连接远程服务器： 打开Anaconda prompt终端，连接远端：\nssh -L 9999:localhost:9999 [用户名]@[主机IP] 此时需输入远端服务器密码（不是docker容器中刚才新设的密码）\n2、浏览器打开jupyter： 本地浏览器输入http://localhost:9999 然后输入登录Jupyter Notebook的密码（即docker容器中刚才新设的密码），选择刚才新建的kernel环境 (e.g., cye)。\nBINGO！\n三，参考资料 https://blog.csdn.net/qq_42001765/article/details/96144442 https://towardsdatascience.com/using-jupyter-notebook-running-on-a-remote-docker-container-via-ssh-ea2c3ebb9055 https://blog.csdn.net/u012325865/article/details/99692108 ","date":1655510400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1655510400,"objectID":"6cb9f1c4558feaebc16cec47587f949e","permalink":"https://chenfei-ye.github.io/zh/post/202206_jupyter_docker/","publishdate":"2022-06-18T00:00:00Z","relpermalink":"/zh/post/202206_jupyter_docker/","section":"post","summary":"如何优雅的在远程容器中debug","tags":["python","docker"],"title":"Jupyter远程调试docker容器","type":"post"},{"authors":["叶辰飞"],"categories":["踩坑"],"content":"背景： 新建一个脚本进程，需要如下传参：\nfastcsr_input = [\u0026#39;--t1\u0026#39;,input_nu_image, \u0026#39;--L4\u0026#39;, t1_label_L4] p_fastcsr = multiprocessing.Process(target=FastCSR_pipeline.main, args=(fastcsr_input)) p_fastcsr.start() p_fastcsr.join() 脚本FastCSR_pipeline.main函数只接受一个输入变量，但运行时报错：\npython TypeError: write() takes exactly 1 argument (but 4 were given)\n方案： 折腾半天找到原因，multiprocessing.Process中args变量是tuple类型，tuple中若只有一个对象，需要在后面加一个逗号。。\n所以修改代码为：\nfastcsr_input = [\u0026#39;--t1\u0026#39;,input_nu_image, \u0026#39;--L4\u0026#39;, t1_label_L4] p_fastcsr = multiprocessing.Process(target=FastCSR_pipeline.main, args=(fastcsr_input,)) p_fastcsr.start() p_fastcsr.join() 即可顺利运行\n","date":1655251200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1655251200,"objectID":"e8676a64b240cc0803e08612f30bf417","permalink":"https://chenfei-ye.github.io/zh/post/202206_python_tuple/","publishdate":"2022-06-15T00:00:00Z","relpermalink":"/zh/post/202206_python_tuple/","section":"post","summary":"原来元组应该这么写。。","tags":["python","pipeline"],"title":"python进程传参踩坑：为何单变量参数被识别为多变量","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"通过下载源文件安装FSL（测试成功，但不稳定，取决于网络）\nRUN apt update \u0026amp;\u0026amp; apt-get install -y \\ libegl1-mesa-dev \\ libopenblas-dev # fsl install ENV FSLDIR=\u0026#34;/opt/fsl-6.0.3\u0026#34; \\ FSLOUTPUTTYPE=NIFTI_GZ \\ PATH=\u0026#34;/opt/fsl-6.0.3/bin:$PATH\u0026#34; RUN echo \u0026#34;Downloading FSL ...\u0026#34; \\ \u0026amp;\u0026amp; mkdir -p /opt/fsl-6.0.3 \\ \u0026amp;\u0026amp; curl -fsSL --retry 20 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.3-centos6_64.tar.gz \\ | tar -xz -C /opt/fsl-6.0.3 --strip-components 1 \\ --exclude=\u0026#39;fsl/doc\u0026#39; \\ --exclude=\u0026#39;fsl/data/atlases\u0026#39; \\ --exclude=\u0026#39;fsl/data/possum\u0026#39; \\ --exclude=\u0026#39;fsl/src\u0026#39; \\ --exclude=\u0026#39;fsl/extras/src\u0026#39; \\ --exclude=\u0026#39;fsl/bin/fslview*\u0026#39; \\ --exclude=\u0026#39;fsl/bin/FSLeyes\u0026#39; \\ \u0026amp;\u0026amp; echo \u0026#34;Installing FSL conda environment ...\u0026#34; \\ \u0026amp;\u0026amp; sed -i -e \u0026#34;/fsleyes/d\u0026#34; -e \u0026#34;/wxpython/d\u0026#34; \\ ${FSLDIR}/etc/fslconf/fslpython_environment.yml \\ \u0026amp;\u0026amp; bash /opt/fsl-6.0.3/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.3 \\ \u0026amp;\u0026amp; find ${FSLDIR}/fslpython/envs/fslpython/lib/python3.7/site-packages/ -type d -name \u0026#34;tests\u0026#34; -print0 | xargs -0 rm -r \\ \u0026amp;\u0026amp; ${FSLDIR}/fslpython/bin/conda clean --all 通过本地文件安装FSL（不执行fslpython_install.sh 不会影响常用命令，但会影响bianca, FSLeyes等）。 注意：最后一行用于指定eddy_cuda\nRUN apt update \u0026amp;\u0026amp; apt-get install -y \\ libegl1-mesa-dev \\ libopenblas-dev COPY fsl-6.0.4-centos6_64.tar.gz /opt/ RUN echo \u0026#34;Downloading FSL ...\u0026#34; \\ \u0026amp;\u0026amp; mkdir -p /opt/fsl-6.0.4 \\ \u0026amp;\u0026amp; tar -xzvf /opt/fsl-6.0.4-centos6_64.tar.gz -C /opt/fsl-6.0.4 --strip-components 1 \\ --exclude=\u0026#39;fsl/doc\u0026#39; \\ --exclude=\u0026#39;fsl/data/atlases\u0026#39; \\ --exclude=\u0026#39;fsl/data/possum\u0026#39; \\ --exclude=\u0026#39;fsl/src\u0026#39; \\ --exclude=\u0026#39;fsl/extras/src\u0026#39; \\ --exclude=\u0026#39;fsl/bin/fslview*\u0026#39; \\ --exclude=\u0026#39;fsl/bin/FSLeyes\u0026#39; \\ \u0026amp;\u0026amp; rm /opt/fsl-6.0.4-centos6_64.tar.gz \\ \u0026amp;\u0026amp; ln -s /opt/fsl-6.0.4/bin/eddy_cuda9.1 /opt/fsl-6.0.4/bin/eddy_cuda 推荐： 简化安装FSL-6.0.4\n# Download minified FSL (6.0.4) WORKDIR /opt/fsl RUN curl -fsSL https://osf.io/dv258/download \\ | tar xz --strip-components 1 ENV FSLDIR=\u0026#34;/opt/fsl\u0026#34; \\ FSLOUTPUTTYPE=NIFTI_GZ \\ FSLMULTIFILEQUIT=\u0026#34;TRUE\u0026#34; \\ FSLTCLSH=\u0026#34;/opt/fsl/bin/fsltclsh\u0026#34; \\ FSLWISH=\u0026#34;/opt/fsl/bin/fslwish\u0026#34; \\ PATH=$PATH:/opt/fsl/bin \\ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$FSLDIR ","date":1654992000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1654992000,"objectID":"2e40b14d509dc131865d1ff2b7db0e43","permalink":"https://chenfei-ye.github.io/zh/post/202206_dockerfile_fsl/","publishdate":"2022-06-12T00:00:00Z","relpermalink":"/zh/post/202206_dockerfile_fsl/","section":"post","summary":"如何在Dockfile中载入FSL","tags":["docker","dMRI"],"title":"FSL-Dokerfile编写","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"场景 一般深度学习算法的训练和调试环境都在服务器端，想不做配置就直接使用vscode进行debug不太可能。而使用远程服务器时，一般用docker进行环境部署的情况比较多。\n使用vscode远程连接服务器debug和远程服务器上的docker容器进行debug，两者关键区别在于后者在docker容器创建时需要注意端口映射问题。本文主要讲解vscode远程连接服务器上的docker环境进行debug的具体步骤。\n一、服务器端的docker容器创建时需要注意的问题 创建容器时，一般按照如下命令创建。其中，端口映射参数：-p 宿主机port:容器port。\nsudo docker run –gpus all -it -d -p 8010:22 –name 容器名称 -v 本地路径或服务器物理路径：容器内路径 -d 镜像id /bin/bash\n上面的命令中**-p 8010:22**，就是将容器的22号端口（ssh服务端口）映射到宿主机（服务器）的8010端口。在本文中，因为需要使用ssh服务端口，所以，容器端口必须写22。（宿主机端口可以写成其他值，但是也不能乱写，防止端口冲突）。这样，在后续的vscode配置中，需要将连接端口写成宿主机（服务器端口），例如本文中的8010端口。下文中会介绍如何配置连接端口。\n注意：在整个配置过程中，应该保持创建的docker容器处于运行状态，方便后续调试。\n二、docker容器内部相关配置 本文介绍的方法需要使用ssh服务进行通信，因此，需要在环境中安装ssh。\n1、进入容器中，使用如下命令修改root用户密码： passwd\n2、检查容器内部是否安装 openssh-server与openssh-client，若没安装，执行如下命令： apt update apt-get install openssh-server apt-get install openssh-client apt-get install vim\n若apt update更新失败，可以换以下清华源，替换文件/etc/apt/sources.list：\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse 3、修改ssh配置文件以下选项: vim /etc/ssh/sshd_config\n在末尾增加如下内容(直接复制即可)：\nPermitRootLogin yes #允许root用户使用ssh登录\n4、启动sshd服务 /etc/init.d/ssh restart\n三、在vscode上的相关配置 1、安装remote-ssh插件 在vscode最左侧应用“扩展”中搜索remote-ssh插件，然后安装。安装完成之后，会在“扩展”图标下方出现“远程资源管理器”图标。\n2、配置vscode的config文件 单击“远程资源管理器”图标，然后单击“配置”按钮进行配置，此时vscode会显示“Select SSH configuration file to update”，选择路径中带有“.ssh”的config文件。\n填写config文件内容，注意按照如下格式填写：\nHost可以根据自己的喜好起一个标志名称。HostName必须填写需要远程连接的服务器IP地址。User此处因为远程的是服务器上配置的docker容器，默认用户名是root，此处需要改下为root。\n特别注意：由于需要远程连接的是服务器上的docker容器，而且前面提到：ssh服务器的22号端口已经映射为8010,因此，务必增加一个Port，填写自己映射的端口。如果只是远程服务器，不需要用docker容器，则，不需要增加Port这一行。配置完成后，保存配置。\n3、开启远程连接 如下图所示，config文件中写的Host名称alias就会显示在最左侧。此时，单击“新建连接”按钮，vscode会重新打开一个窗口，提示输入远程服务器的密码，注意，此时必须填入docker容器中创建的用户密码。\n回车之后，可能会提示选择远程服务器的平台是哪一种系统类型，选项有linux\\windows\\MAC。应该选择vscode安装的系统平台类型。 选择完成之后，回车即可。此时，在vscode的“终端”窗口可以看到进入docker容器的命令行格式。\n在“终端”窗口可以查看以下远程连接的环境是否正确。 打开远程服务器上的代码，可以在代码任意行最左侧打断点，按F5快捷键可以debug运行。\n四，转载来源 https://cloud.tencent.com/developer/article/1851508 https://blog.csdn.net/hanchaobiao/article/details/84069299 ","date":1654992000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1654992000,"objectID":"cb08d17ac65f8e6ffdc3ab5ddfb51f84","permalink":"https://chenfei-ye.github.io/zh/post/202206_vscode_docker/","publishdate":"2022-06-12T00:00:00Z","relpermalink":"/zh/post/202206_vscode_docker/","section":"post","summary":"如何优雅的在远程容器中debug","tags":["python","docker"],"title":"VScode远程调试docker容器","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"使用 把以下命令添加到Dockfile即可：\nFROM mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1 说明 工具包括：\nubuntu + cuda11 + python== 3.8.3 + torch== 1.7.0 + ants== 2.3.1 mrtrix3== 3.0.3 fsl== 6.0.4 c3d== nightly\npython包：\nastor 0.8.1 backcall 0.2.0 beautifulsoup4 4.9.3 bids-validator 1.9.3 certifi 2020.6.20 cffi 1.14.0 chardet 3.0.4 ci-info 0.2.0 click 8.1.3 conda 4.9.1 conda-build 3.20.5 conda-package-handling 1.7.0 cryptography 2.9.2 cycler 0.11.0 dataclasses 0.6 decorator 4.4.2 dnspython 2.0.0 docopt 0.6.2 etelemetry 0.3.0 filelock 3.0.12 fonttools 4.33.3 formulaic 0.3.4 future 0.18.2 glob2 0.7 idna 2.9 interface-meta 1.3.0 ipython 7.18.1 ipython-genutils 0.2.0 isodate 0.6.1 jedi 0.17.2 Jinja2 2.11.2 joblib 1.1.0 kiwisolver 1.4.2 libarchive-c 2.9 looseversion 1.0.1 lxml 4.8.0 MarkupSafe 1.1.1 matplotlib 3.5.2 mkl-fft 1.2.0 mkl-random 1.1.1 mkl-service 2.3.0 networkx 2.8 nibabel 3.2.2 nilearn 0.9.1 nipype 1.8.1 num2words 0.5.10 numpy 1.19.2 olefile 0.46 packaging 21.3 pandas 1.4.2 parso 0.7.0 pexpect 4.8.0 pickleshare 0.7.5 Pillow 9.0.0 pip 20.0.2 pkginfo 1.6.0 prompt-toolkit 3.0.8 prov 2.0.0 psutil 5.7.2 ptyprocess 0.6.0 pybids 0.15.1 pycosat 0.6.3 pycparser 2.20 pydot 1.4.2 Pygments 2.7.1 pyOpenSSL 19.1.0 pyparsing 3.0.9 PySocks 1.7.1 python-dateutil 2.8.2 python-etcd 0.4.5 pytz 2020.1 PyYAML 5.3.1 rdflib 6.1.1 requests 2.23.0 ruamel-yaml 0.15.87 scikit-learn 1.1.0 scipy 1.8.0 setuptools 46.4.0.post20200518 simplejson 3.17.6 six 1.14.0 soupsieve 2.0.1 SQLAlchemy 1.3.24 threadpoolctl 3.1.0 torch 1.7.0 torchelastic 0.2.1 torchvision 0.8.0 tqdm 4.46.0 traitlets 5.0.5 traits 6.3.2 typing-extensions 3.7.4.3 urllib3 1.25.8 wcwidth 0.2.5 wheel 0.34.2 wrapt 1.14.1\n彩蛋 该镜像已内置ssh-server服务，可直接利用vscode实现远程镜像开发和调试\n启动容器，指定端口（如8088） docker run --gpus all -it --rm -p 8088:22 mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1 在容器console中启动ssh服务：/etc/init.d/ssh restart 在VScode中的remote config文件新增Host， 添加对应IP、用户名、端口即可（点此参考具体细节） 容器的管理员密码：mindsgo123 ","date":1654992000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1654992000,"objectID":"c583a8edf9818a97a9868f64b65854d5","permalink":"https://chenfei-ye.github.io/zh/post/202206_dockerfile_all/","publishdate":"2022-06-12T00:00:00Z","relpermalink":"/zh/post/202206_dockerfile_all/","section":"post","summary":"FSL、ANTs、MRtrix等常见的神经影像工具都在里面了，压缩后大小3.74GB。。","tags":["docker","dMRI"],"title":"用于神经影像算法开发的基础镜像","type":"post"},{"authors":["叶辰飞"],"categories":["踩坑"],"content":"背景 试用合作医院提供的堡垒机服务器，自带的NVIDIA-A6000显卡不支持结构像自动分割的pipeline镜像，运行时报错capability sm_86 is not compatible。发现是由于显卡的架构比较新，旧版pytorch库不支持。同时根据输出可以看到 The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_70 sm_75当前pytorch只能支持上面几种（显卡算力）架构。\n解决方案 把基础镜像直接更新到pytorch/pytorch:1.7.0-cuda11.0-cudnn8-runtime，解决。 NOTE: CUDA10.x最高支持算力7.x; CUDA11.0最高支持算力8.x\n","date":1654905600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1654905600,"objectID":"a06ab6116ebe662f23b9730b567fc7e0","permalink":"https://chenfei-ye.github.io/zh/post/202206_cuda_pytorch/","publishdate":"2022-06-11T00:00:00Z","relpermalink":"/zh/post/202206_cuda_pytorch/","section":"post","summary":"踩坑`pytorch capability sm_86 is not compatible with the current PyTorch installation` 的问题","tags":["pipeline","AI"],"title":"CUDA版本、显卡算力、Pytorch对应关系","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"场景 MRtrix3输出的tck神经纤维文件，需要转换成TrackVis能识别的trk格式\nPython实现 #!/usr/bin/env python import json import nibabel as nib from nibabel.streamlines import Field from nibabel.orientations import aff2axcodes def main(): tck_file = \u0026#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.tck\u0026#39; anatomy_file = \u0026#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/bundle_segmentations/CC.nii.gz\u0026#39; trk_file = \u0026#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.trk\u0026#39; nii = nib.load(anatomy_file) header = {} header[Field.VOXEL_TO_RASMM] = nii.affine.copy() header[Field.VOXEL_SIZES] = nii.header.get_zooms()[:3] header[Field.DIMENSIONS] = nii.shape[:3] header[Field.VOXEL_ORDER] = \u0026#34;\u0026#34;.join(aff2axcodes(nii.affine)) tck = nib.streamlines.load(tck_file) nib.streamlines.save(tck.tractogram, trk_file, header=header) if __name__ == \u0026#39;__main__\u0026#39;: main() ","date":1654905600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1654905600,"objectID":"32b42e75d64749d1f5c6eeff610d66be","permalink":"https://chenfei-ye.github.io/zh/post/202206_tck2trk/","publishdate":"2022-06-11T00:00:00Z","relpermalink":"/zh/post/202206_tck2trk/","section":"post","summary":"如何实现人脑神经纤维数据的格式转换","tags":["python","dMRI"],"title":"神经纤维格式转换：tck转trk","type":"post"},{"authors":["叶辰飞"],"categories":["技巧"],"content":"数据描述：\nsummary(A) psych::describe(A) 直方图：\nhist(A) 概率密度图density plot:\nhist(A,prob=TRUE) lines(density(A, bw=\u0026#34;SJ\u0026#34;)) 累计分布图CDF：\nplot(ecdf(A), do.points=FALSE, verticals=TRUE) 拟合同参数高斯分布的CDF：\nlines(x, pnorm(x, mean=mean(A), sd=sqrt(var(A))), lty=3) 双样本检验\n经典的two-sample t-test：\nt.test(A, B, var.equal=TRUE) 如果不满足同方差，则用 Welch modified two-sample t-test :\nres=t.test(A, B) res$p.val 检验同方差的方法可用F-test:\nvar.test(A, B) 如果不满足正态性，则用非参数检验，即two-sample Mann-Whitney test:（但是仍然assume两个分布是相似的）\nwilcox.test(A, B) 如果连分布也很不相似，则考虑用permutation test\ncoin::independence_test(Length ~ Hand, data = Data) 是否满足正态分布，有三种方法检验：\nQQ图： par(pty=\u0026#34;s\u0026#34;) # arrange for a square figure region qqnorm(long) qqline(long) Shapiro-Wilk test： shapiro.test(A) # Shapiro-Wilk normality test Kolmogorov-Smirnov test： ks.test(A, \u0026#34;pnorm\u0026#34;, mean = mean(A), sd = sqrt(var(A))) 独立性检验：\n卡方分布有一个重要应用就是根据样本数据来检验两个分类变量的独立性，我们以CO2数据为例来说明chisq.test函数的使用，help(CO2)可以了解更多信息。\ndata(CO2) #读入内置的数据包，其中Type和Treatmen是其中两个分类变量。 chisq.test(table(CO2$Type,CO2$Treatment)) #检验这两个因子之间是否独立 结果显示P值为0.82，因此可以认为两因子之间独立。在样本较小的情况下，还可以使用fisher精确检验，对应的函数是fisher.test。\nproportion test:(在两个group的情况下，结果和卡方检验是一样的)\nlibrary(MASS) table(quine$Eth, quine$Sex) prop.test(table(quine$Eth, quine$Sex), correct=FALSE) ANOVA：\nanova(lm(y~x)) summary(aov(y~x)) # summary(aov(lm(y~x)))也是一样的结果 summary(aov(y~x+covariate)) # ANCOVA summary(test)[[1]][[\u0026#34;Pr(\u0026gt;F)\u0026#34;]] Post-hoc:\nTukeyHSD(aov(y ~ x, data)) 对于ANCOVA的post hoc:\nTukeyHSD(aov(y ~ x+covariate, data),which=\u0026#39;x\u0026#39;) 如果ANOVA不满足正态性，用Kruskal-Wallis非参数检验：\nkruskal.test(y~x, data = df) # post-hoc for Kruskal-Wallis Test： Steel-Dwass test library(FSA) dunnTest(y~x, data=df, method=\u0026#34;bonferroni\u0026#34;) 多重比较校正：\nps \u0026lt;- runif(20, max=.2) def \u0026lt;- p.adjust(ps) bon \u0026lt;- p.adjust(ps, method=\u0026#34;bonferroni\u0026#34;) bh \u0026lt;- p.adjust(ps, method=\u0026#34;BH\u0026#34;) #Benjamini, Hochberg (1995) default fdr by \u0026lt;- p.adjust(ps, method=\u0026#34;BY\u0026#34;) #Benjamini, Yekutieli (2001) another fdr x = matrix(rnorm(10000*5),nrow=10000) y = matrix(rnorm(10000*5),nrow=10000) p = sapply(1:10000, function(i) t.test(x[i,],y[i,])$p.val) q = p.adjust(p, method = \u0026#34;fdr\u0026#34;) ","date":1653955200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1653955200,"objectID":"925c136f5e055770a19abb7f4a45d8e4","permalink":"https://chenfei-ye.github.io/zh/post/202205_r_statistics/","publishdate":"2022-05-31T00:00:00Z","relpermalink":"/zh/post/202205_r_statistics/","section":"post","summary":"搞统计，试了这么多还是觉得R最方便。。","tags":["R","statistics"],"title":"R常见统计模型使用","type":"post"},{"authors":["Yang Y","Guo X","叶辰飞","Xiang Y","Ma T"],"categories":null,"content":"Supplementary notes can be added here, including code.\n","date":1647993600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1647993600,"objectID":"cebf6f35a29939f997322e81fe6276fe","permalink":"https://chenfei-ye.github.io/zh/publication/c_2022_c_midl_brainage/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/c_2022_c_midl_brainage/","section":"publication","summary":"We presents a novel regularization brain age estimation method that penalizes the predictive distribution using knowledge distillation and introduces additional knowledge to reinforce the learning process.","tags":[],"title":"Regularizing Brain Age Prediction via Gated Knowledge Distillation","type":"publication"},{"authors":["Zheng J","Yang Q","Makris N","Huang K","Liang J","叶辰飞","Yu X","Tian M","Ma T","Mou T","Guo W","Kikinis R","Gao Y"],"categories":null,"content":"","date":1647216000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1647216000,"objectID":"36430ac108dbd873f7f7348a051b1262","permalink":"https://chenfei-ye.github.io/zh/publication/j_2022_j_cerebellar/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2022_j_cerebellar/","section":"publication","summary":"We used the BigBrain dataset to generate area and point-wise thickness measurements for all layers of the cerebellar cortex and for each lobule in particular.","tags":[],"title":"Three‑Dimensional Digital Reconstruction of the Cerebellar Cortex: Lobule Thickness, Surface Area Measurements, and Layer Architecture","type":"publication"},{"authors":["叶辰飞","Huang J","Liang L","Yan Z","Qi Z","Kang X","Liu Z","Dong H","Lv H","Ma T","Lu J"],"categories":null,"content":"","date":1643241600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1643241600,"objectID":"be4473fe672d5cfb4244027701e17c9e","permalink":"https://chenfei-ye.github.io/zh/publication/j_2022_j_coupling_ms/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2022_j_coupling_ms/","section":"publication","summary":"提出了定量评估人脑结构功能耦合的计算方法，该方法被证明能够弥补传统脑结构-功能线性相关的统计局限性，揭示了人脑结构功能耦合空间分布模式的层次性空间阶跃特性；并且首次应用与多发性硬化及其早期阶段（临床孤立综合征）的鉴别，发现患者的人脑结构功能的异常耦合水平与认知功能障碍水平具有显著相关。","tags":[],"title":"Coupling of brain activity and structural network in multiple sclerosis: A graph frequency analysis study","type":"publication"},{"authors":["Yang Y","叶辰飞","Sun J","Liang L","Lv H","Gao L","Fang J","Ma T","Wu T"],"categories":null,"content":"","date":1622937600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1622937600,"objectID":"75da44cf260108da54e26b4b811169e9","permalink":"https://chenfei-ye.github.io/zh/publication/j_2021_j_pd_mdmr_neuclin/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2021_j_pd_mdmr_neuclin/","section":"publication","summary":"提出针对脑影像网络组学的高通量计算方法，针对神经退行疾病建立人脑复杂网络的自动化特征表达方法，在帕金森病早期诊断方面体现出高敏感性与特异性，**Nature Reviews Neurology**发表[特别评论](https://www.nature.com/articles/s41582-021-00543-3)称该方法为拓展神经退行病人脑连接组学的重要工具。","tags":[],"title":"Alteration of brain structural connectivity in progression of Parkinsons disease: A connectome-wide network analysis","type":"publication"},{"authors":["Liang L","Zhou P","Lu W","Guo X","叶辰飞","Lv H","Wang T","Ma T"],"categories":null,"content":"","date":1617667200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1617667200,"objectID":"d9bec7106ff975b8d30255986f815cf5","permalink":"https://chenfei-ye.github.io/zh/publication/j_2021_j_cmig/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2021_j_cmig/","section":"publication","summary":"We proposed an anatomical knowledge-based MRI deep learning pipeline (AU-Net), handcrafted anatomical-based spatial features developed from brain atlas were integrated with a well-designed U-Net configuration to simultaneously segment and locate white matter hyperintensities (WMHs).","tags":[],"title":"An anatomical knowledge-based MRI deep learning pipeline for white matter hyperintensity quantification associated with cognitive impairment","type":"publication"},{"authors":["Faria AV","Zhao Y","叶辰飞","Hsu J","Yang K","Cifuentes E","Wang L","Mori S","Miller M","Caffo B","Sawa A"],"categories":null,"content":"","date":1616803200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1616803200,"objectID":"4d68f912a504d135bd2b57c594944147","permalink":"https://chenfei-ye.github.io/zh/publication/j_2020_j_hbm/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2020_j_hbm/","section":"publication","summary":"We studied 87 first episode psychosis (FEP) patients and 62 healthy subjects by combining supervised integrated factor analysis (SIFA) with a novel pipeline for automated structure-based analysis, an efficient and comprehensive method for dimensional data reduction that our group recently established.","tags":[],"title":"Multimodal MRI assessment for first episode psychosis- A major change in the thalamus and an efficient stratification of a subgroup","type":"publication"},{"authors":["Bi Q","Wu Y","Mei S","叶辰飞","Zou X","Zhang Z","Liu X","Wei L","Truelove SA","Zhang T","Gao W","Cheng C","Tang X","Wu X","Wu Yu","Sun B","Huang S","Sun Y","Zhang J","Ma T","Lessler J","Feng T"],"categories":null,"content":"","date":1587945600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1587945600,"objectID":"a87a7633f4cd93bd8670eb2233fea9b4","permalink":"https://chenfei-ye.github.io/zh/publication/j_2020_j_lancetid/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2020_j_lancetid/","section":"publication","summary":"英国权威医学杂志《柳叶刀》在其传染病子刊发表中美学者联合完成的学术论文，对深圳391宗确诊病例与1286名密接者进行样本追踪，分析研究新冠病毒的传播机制，系统介绍了深圳作为人口高密度城市遏制疫情的成功经验。研究结果显示，有效隔离并对广泛的密切接触者进行追踪，这两项措施成为抑制疫情扩大的关键工具。中央电视台《中国新闻》栏目以“《柳叶刀》披露深圳抗疫关键密码，全球媒体竞相聚焦深圳经验”为题进行了报道，深圳卫视连续三天播出了对论文作者的专访。","tags":[],"title":"Epidemiology and transmission of COVID-19 in 391 cases and 1286 of their close contacts in Shenzhen, China: a retrospective cohort study","type":"publication"},{"authors":["Sun J","Lai Z","Ma J","Gao L","Chen M","Chen J","Fang J","Fan Y","Bao Y","Zhang D","Chan P","Yang Q","叶辰飞","Wu T","Ma T"],"categories":null,"content":"","date":1585267200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1585267200,"objectID":"9de3e42831c66be4188c0eff9ca6baf1","permalink":"https://chenfei-ye.github.io/zh/publication/j_2019_j_movement_disorder/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2019_j_movement_disorder/","section":"publication","summary":"This study aimed to quantitatively evaluate iron content in idiopathic rapid eye movement sleep behavior disorder patients using quantitative susceptibility mapping and to examine the potential of this technique to identify the prodromal stage of α-synucleinopathies..","tags":[],"title":"Quantitative evaluation of iron content in idiopathic rapid eye movement sleep behavior disorder","type":"publication"},{"authors":["叶辰飞","Albert M","Brown T","Bilgel M","Hsu J","Ma T","Caffo B","Miller MI","Mori S","Oishi K"],"categories":null,"content":"","date":1564185600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1564185600,"objectID":"77f6b383fa1a52694c60be61c73faeb7","permalink":"https://chenfei-ye.github.io/zh/publication/j_2019_j_eaca_heliyon/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2019_j_eaca_heliyon/","section":"publication","summary":"To demonstrate the capability to detect a disruption of the correlation network affected by pathology, we applied the anatomical covariance analysis (eACA) to two groups of cognitively-normal elderly individuals, one with (PiB+) and one without (PiB-) amyloid deposition in their brains.","tags":[],"title":"Extended multimodal whole-brain anatomical covariance analysis: detection of disrupted correlation networks related to amyloid deposition","type":"publication"},{"authors":["Faria AV","Crawford J","叶辰飞","Hsu J","Kenkare A","Schretlen D","Sawa A"],"categories":null,"content":"","date":1561593600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1561593600,"objectID":"a144e469019a736dbc723ed8eee4c5bf","permalink":"https://chenfei-ye.github.io/zh/publication/j_2019_j_schizores/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2019_j_schizores/","section":"publication","summary":"We addressed the relationship between white matter architecture, represented by MRI fractional anisotropy (FA), and cognition in individuals with first-episode psychosis (FEP) by applying for a new methodology that allows whole brain parcellation of core and peripheral white matter in a biologically meaningful fashion.","tags":[],"title":"Relationship between neuropsychological behavior and brain white matter in first-episode psychosis","type":"publication"},{"authors":["叶辰飞","Mori S","Chan P","Ma T"],"categories":null,"content":"","date":1551225600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1551225600,"objectID":"4d72af2621b5fb608a7ed37c75db30b4","permalink":"https://chenfei-ye.github.io/zh/publication/j_2019_j_mdmr_neuclin/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2019_j_mdmr_neuclin/","section":"publication","summary":"A multivariate distance matrix regression (MDMR) analysis was performed to detect abnormality in brain structural network along with Alzheimer's disease progression.","tags":[],"title":"Connectome wide network analysis of white matter connectivity in Alzheimers disease","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://chenfei-ye.github.io/zh/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/zh/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["叶辰飞","Ma T","Wu D","Ceritoglu C","Miller MI","Mori S"],"categories":null,"content":"Please see the website for brain automatic parcellation pipeline .\n","date":1532649600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1532649600,"objectID":"a0dc73622154f25db0946a75cf01adc5","permalink":"https://chenfei-ye.github.io/zh/publication/j_2018_j_plos-one/","publishdate":"2022-01-27T00:00:00Z","relpermalink":"/zh/publication/j_2018_j_plos-one/","section":"publication","summary":"Our pre-selection strategy provides better segmentation performance in terms of both accuracy and efficiency for the multi-atlas brain segmentation of human brain MR images.","tags":[],"title":"Atlas pre-selection strategies to enhance the efficiency and accuracy of multi-atlas brain segmentation tools","type":"publication"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://chenfei-ye.github.io/zh/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/zh/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":[null],"title":"Example Project","type":"project"}]