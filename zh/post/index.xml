<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | 主页</title>
    <link>https://chenfei-ye.github.io/zh/post/</link>
      <atom:link href="https://chenfei-ye.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><lastBuildDate>Mon, 12 Sep 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://chenfei-ye.github.io/media/icon_hu80a2544e7b046e76dea23103488b26f7_18404_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://chenfei-ye.github.io/zh/post/</link>
    </image>
    
    <item>
      <title>分享下四川美院大神XISION的作品</title>
      <link>https://chenfei-ye.github.io/zh/post/202209_chs_dragon/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202209_chs_dragon/</guid>
      <description>&lt;h2 id=&#34;超美的画&#34;&gt;超美的画&lt;/h2&gt;
&lt;p&gt;GGAC2020山海有灵特等奖川美大四学生吴俊达（xision）的作品系列，非常喜欢他的龙、牧童和水牛。&lt;/p&gt;
&lt;h3 id=&#34;一定要看的链接&#34;&gt;&lt;strong&gt;一定要看的链接&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://xision.zcool.com.cn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://xision.zcool.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter远程调试docker容器</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_jupyter_docker/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_jupyter_docker/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chenfei-ye.github.io/zh/post/202206_vscode_docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上一篇&lt;/a&gt;写了如何使用vscode远程连接服务器的docker容器进行debug，这篇简单记录一下如何使用jupyter远程连接服务器的docker容器。&lt;/p&gt;
&lt;p&gt;场景： 本地win10笔记本，远程连接远程ubuntu服务器的docker容器&lt;/p&gt;
&lt;p&gt;使用jupyter相对于vscode的优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动态笔记脚本，Markdown与code的完美结合&lt;/li&gt;
&lt;li&gt;画图，模型训练&lt;/li&gt;
&lt;li&gt;快速运行下载的开源&lt;code&gt;ipynb&lt;/code&gt;文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然对于神经影像pipeline项目，个人更偏爱vscode去debug&lt;/p&gt;
&lt;p&gt;言归正传：&lt;/p&gt;
&lt;h3 id=&#34;一服务器端容器设置&#34;&gt;&lt;strong&gt;一、服务器端容器设置&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1容器启动设置端口&#34;&gt;&lt;strong&gt;1、容器启动，设置端口&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 建议提前启动一个tmux窗口，防止远端服务断电断网
docker run -it --rm --gpus all -p 9999:9999 mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2生成notebook-配置文件&#34;&gt;&lt;strong&gt;2、生成notebook 配置文件&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-get install jupyter
apt-get install ipython
jupyter notebook --generate-config
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3生成密码&#34;&gt;&lt;strong&gt;3、生成密码&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jupyter notebook password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时会在&lt;code&gt;/root/.jupyter/jupyter_notebook_config.json&lt;/code&gt;中生成密文。复制该密文，如&lt;code&gt;sha1:56a8dc892ab2:239cb1f1bda7f8614e546853e8298efc566489d9&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;4修改配置文件&#34;&gt;&lt;strong&gt;4、修改配置文件&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;/root/.jupyter/jupyter_notebook_config.py&lt;/code&gt;中添加这几行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;c.NotebookApp.ip=&amp;#39;*&amp;#39;
c.NotebookApp.password = u&amp;#39;刚才复制的那个密文&amp;#39;
c.NotebookApp.open_browser = False
c.NotebookApp.port =9999 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;5安装python3-dev&#34;&gt;&lt;strong&gt;5、安装python3-dev&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;提前解决jupyter无法连接python3服务器内核 一直显示正在连接服务器的问题&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-get install python3-dev
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;6安装ipykernel&#34;&gt;&lt;strong&gt;6、安装ipykernel&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 将当前python环境添加进jupyter kernel
pip install ipykernel
python -m ipykernel install --name cye（你的环境名）`
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;7启动jupyter&#34;&gt;&lt;strong&gt;7、启动jupyter&lt;/strong&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jupyter notebook --ip=0.0.0.0 --no-browser --allow-root --port 9999
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;二win10本地相关配置&#34;&gt;&lt;strong&gt;二、win10本地相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;假设windows环境已成功安装anaconda和jupyter&lt;/p&gt;
&lt;h4 id=&#34;1连接远程服务器&#34;&gt;&lt;strong&gt;1、连接远程服务器：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;打开&lt;code&gt;Anaconda prompt&lt;/code&gt;终端，连接远端：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -L 9999:localhost:9999 [用户名]@[主机IP]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时需输入远端服务器密码（不是docker容器中刚才新设的密码）&lt;/p&gt;
&lt;h4 id=&#34;2浏览器打开jupyter&#34;&gt;&lt;strong&gt;2、浏览器打开jupyter：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;本地浏览器输入&lt;a href=&#34;http://localhost:9999/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:9999&lt;/a&gt;
然后输入登录Jupyter Notebook的密码（即docker容器中刚才新设的密码），选择刚才新建的kernel环境 (e.g., &lt;code&gt;cye&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;BINGO！&lt;/p&gt;
&lt;h3 id=&#34;三参考资料&#34;&gt;&lt;strong&gt;三，参考资料&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_42001765/article/details/96144442&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.csdn.net/qq_42001765/article/details/96144442&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/using-jupyter-notebook-running-on-a-remote-docker-container-via-ssh-ea2c3ebb9055&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://towardsdatascience.com/using-jupyter-notebook-running-on-a-remote-docker-container-via-ssh-ea2c3ebb9055&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012325865/article/details/99692108&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.csdn.net/u012325865/article/details/99692108&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>python进程传参踩坑：为何单变量参数被识别为多变量</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_python_tuple/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_python_tuple/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景：&lt;/h3&gt;
&lt;p&gt;新建一个脚本进程，需要如下传参：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fastcsr_input = [&amp;#39;--t1&amp;#39;,input_nu_image, &amp;#39;--L4&amp;#39;, t1_label_L4]
p_fastcsr = multiprocessing.Process(target=FastCSR_pipeline.main, args=(fastcsr_input))
p_fastcsr.start()
p_fastcsr.join()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;脚本&lt;code&gt;FastCSR_pipeline.main&lt;/code&gt;函数只接受一个输入变量，但运行时报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python TypeError: write() takes exactly 1 argument (but 4 were given)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;方案&#34;&gt;方案：&lt;/h3&gt;
&lt;p&gt;折腾半天找到&lt;a href=&#34;https://stackoverflow.com/questions/1559125/string-arguments-in-python-multiprocessing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原因&lt;/a&gt;，&lt;code&gt;multiprocessing.Process&lt;/code&gt;中&lt;code&gt;args&lt;/code&gt;变量是&lt;code&gt;tuple&lt;/code&gt;类型，&lt;code&gt;tuple&lt;/code&gt;中若只有一个对象，需要在后面加一个逗号。。&lt;/p&gt;
&lt;p&gt;所以修改代码为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fastcsr_input = [&amp;#39;--t1&amp;#39;,input_nu_image, &amp;#39;--L4&amp;#39;, t1_label_L4]
p_fastcsr = multiprocessing.Process(target=FastCSR_pipeline.main, args=(fastcsr_input,))
p_fastcsr.start()
p_fastcsr.join()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即可顺利运行&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FSL-Dokerfile编写</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_dockerfile_fsl/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_dockerfile_fsl/</guid>
      <description>&lt;p&gt;通过下载源文件安装FSL（测试成功，但不稳定，取决于网络）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    libegl1-mesa-dev &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    libopenblas-dev&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# fsl install  &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl-6.0.3&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;FSLOUTPUTTYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NIFTI_GZ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl-6.0.3/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Downloading FSL ...&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir -p /opt/fsl-6.0.3 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl -fsSL --retry &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.3-centos6_64.tar.gz &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tar -xz -C /opt/fsl-6.0.3 --strip-components &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/doc&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/atlases&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/possum&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/extras/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/fslview*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/FSLeyes&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Installing FSL conda environment ...&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sed -i -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;/fsleyes/d&amp;#34;&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;/wxpython/d&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/etc/fslconf/fslpython_environment.yml &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash /opt/fsl-6.0.3/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.3 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; find &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/fslpython/envs/fslpython/lib/python3.7/site-packages/ -type d -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;tests&amp;#34;&lt;/span&gt;  -print0 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -0 rm -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/fslpython/bin/conda clean --all&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过本地文件安装FSL（不执行&lt;code&gt;fslpython_install.sh&lt;/code&gt; 不会影响常用命令，但会影响bianca, FSLeyes等）。 &lt;strong&gt;注意&lt;/strong&gt;：最后一行用于指定eddy_cuda&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    libegl1-mesa-dev &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    libopenblas-dev&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; fsl-6.0.4-centos6_64.tar.gz /opt/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Downloading FSL ...&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir -p /opt/fsl-6.0.4 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xzvf /opt/fsl-6.0.4-centos6_64.tar.gz -C /opt/fsl-6.0.4 --strip-components &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/doc&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/atlases&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/data/possum&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/extras/src&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/fslview*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --exclude&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fsl/bin/FSLeyes&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm /opt/fsl-6.0.4-centos6_64.tar.gz &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -s /opt/fsl-6.0.4/bin/eddy_cuda9.1 /opt/fsl-6.0.4/bin/eddy_cuda &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;推荐&lt;/strong&gt;： 简化安装FSL-6.0.4&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Download minified FSL (6.0.4)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /opt/fsl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; curl -fsSL https://osf.io/dv258/download &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tar xz --strip-components &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FSLDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLOUTPUTTYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NIFTI_GZ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLMULTIFILEQUIT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;TRUE&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLTCLSH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl/bin/fsltclsh&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;FSLWISH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/fsl/bin/fslwish&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;:/opt/fsl/bin &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$FSLDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>VScode远程调试docker容器</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_vscode_docker/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_vscode_docker/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;一般深度学习算法的训练和调试环境都在服务器端，想不做配置就直接使用vscode进行debug不太可能。而使用远程服务器时，一般用docker进行环境部署的情况比较多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用vscode远程连接服务器debug&lt;/strong&gt;和&lt;strong&gt;远程服务器上的docker&lt;/strong&gt;容器&lt;strong&gt;进行debug&lt;/strong&gt;，两者关键区别在于后者在docker容器创建时需要注意端口映射问题。本文主要讲解&lt;strong&gt;vscode远程连接服务器上的docker环境进行debug&lt;/strong&gt;的具体步骤。&lt;/p&gt;
&lt;h3 id=&#34;一服务器端的docker容器创建时需要注意的问题&#34;&gt;&lt;strong&gt;一、服务器端的docker容器创建时需要注意的问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;创建容器时，一般按照如下命令创建。其中，端口映射参数：&lt;strong&gt;-p&lt;/strong&gt; &lt;strong&gt;宿主机port:容器port&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo docker run &amp;ndash;gpus all -it -d -p 8010:22 &amp;ndash;name 容器名称 -v 本地路径或服务器物理路径：容器内路径 -d 镜像id /bin/bash&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的命令中**-p 8010:22**，就是将容器的22号端口（ssh服务端口）映射到宿主机（服务器）的8010端口。在本文中，因为需要使用ssh服务端口，所以，容器端口必须写22。（宿主机端口可以写成其他值，但是也不能乱写，防止端口冲突）。这样，在后续的vscode配置中，需要将连接端口写成宿主机（服务器端口），例如本文中的8010端口。下文中会介绍如何配置连接端口。&lt;/p&gt;
&lt;p&gt;注意：在整个配置过程中，应该保持创建的docker容器处于运行状态，方便后续调试。&lt;/p&gt;
&lt;h3 id=&#34;二docker容器内部相关配置&#34;&gt;&lt;strong&gt;二、docker容器内部相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍的方法需要使用ssh服务进行通信，因此，需要在环境中安装ssh。&lt;/p&gt;
&lt;h4 id=&#34;1进入容器中使用如下命令修改root用户密码&#34;&gt;&lt;strong&gt;1、进入容器中，使用如下命令修改root用户密码：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;passwd&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2检查容器内部是否安装-openssh-server与openssh-client若没安装执行如下命令&#34;&gt;&lt;strong&gt;2、检查容器内部是否安装 openssh-server与openssh-client，若没安装，执行如下命令：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;apt-get install openssh-serverapt-get install openssh-client&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3修改ssh配置文件以下选项&#34;&gt;&lt;strong&gt;3、修改ssh配置文件以下选项:&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;vim /etc/ssh/sshd_config&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在末尾增加如下内容(直接复制即可)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;#PermitRootLogin prohibit-password # 默认打开 禁止root用户使用密码登陆，需要将其注释&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;RSAAuthentication yes #启用 RSA 认证PubkeyAuthentication yes #启用公钥私钥配对认证方式PermitRootLogin yes #允许root用户使用ssh登录&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4启动sshd服务&#34;&gt;&lt;strong&gt;4、启动sshd服务&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;/etc/init.d/ssh restart&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;5退出容器连接测试&#34;&gt;&lt;strong&gt;5、退出容器，连接测试&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ssh &lt;a href=&#34;mailto:root@127.0.0.1&#34;&gt;root@127.0.0.1&lt;/a&gt; -p 8010&lt;/strong&gt; 注意，此处应该是测试8010端口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入密码成功进入容器内部即配置成功。&lt;/p&gt;
&lt;h3 id=&#34;三在vscode上的相关配置&#34;&gt;&lt;strong&gt;三、在vscode上的相关配置&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1安装remote-ssh插件&#34;&gt;&lt;strong&gt;1、安装remote-ssh插件&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在vscode最左侧应用“&lt;strong&gt;扩展&lt;/strong&gt;”中搜索&lt;strong&gt;remote-ssh&lt;/strong&gt;插件，然后安装。安装完成之后，会在“&lt;strong&gt;扩展&lt;/strong&gt;”图标下方出现“&lt;strong&gt;远程资源管理器&lt;/strong&gt;”图标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2配置vscode的config文件&#34;&gt;&lt;strong&gt;2、配置vscode的config文件&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单击“&lt;strong&gt;远程资源管理器&lt;/strong&gt;”图标，然后单击“&lt;strong&gt;配置&lt;/strong&gt;”按钮进行配置，此时vscode会显示“Select SSH configuration file to update”，选择路径中带有“.ssh”的config文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;填写config文件内容，注意按照如下格式填写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;可以根据自己的喜好起一个标志名称。&lt;strong&gt;HostName&lt;/strong&gt;必须填写需要远程连接的服务器IP地址。&lt;strong&gt;User&lt;/strong&gt;此处因为远程的是服务器上配置的docker容器，默认用户名是&lt;strong&gt;root&lt;/strong&gt;，此处需要改下为root。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;特别注意&lt;/strong&gt;：由于需要远程连接的是服务器上的docker容器，而且前面提到：ssh服务器的22号端口已经映射为8010,因此，务必增加一个&lt;strong&gt;Port&lt;/strong&gt;，填写自己映射的端口。如果只是远程服务器，不需要用docker容器，则，不需要增加Port这一行。配置完成后，保存配置。&lt;/p&gt;
&lt;h4 id=&#34;3开启远程连接&#34;&gt;&lt;strong&gt;3、开启远程连接&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如下图所示，config文件中写的Host名称alias就会显示在最左侧。此时，单击“新建连接”按钮，vscode会重新打开一个窗口，提示输入远程服务器的密码，注意，此时必须填入docker容器中创建的用户密码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;回车之后，可能会提示选择远程服务器的平台是哪一种系统类型，选项有linux\windows\MAC。应该选择vscode安装的系统平台类型。 选择完成之后，回车即可。此时，在vscode的“终端”窗口可以看到进入docker容器的命令行格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在“终端”窗口可以查看以下远程连接的环境是否正确。 打开远程服务器上的代码，可以在代码任意行最左侧打断点，按F5快捷键可以debug运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;四转载来源&#34;&gt;&lt;strong&gt;四，转载来源&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1851508&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.tencent.com/developer/article/1851508&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/hanchaobiao/article/details/84069299&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.csdn.net/hanchaobiao/article/details/84069299&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>用于神经影像算法开发的基础镜像</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_dockerfile_all/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_dockerfile_all/</guid>
      <description>&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;把以下命令添加到&lt;code&gt;Dockfile&lt;/code&gt;即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;p&gt;工具包括：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ubuntu + cuda11 + python== 3.8.3 + torch== 1.7.0 + ants== 2.3.1 mrtrix3== 3.0.3 fsl== 6.0.4 c3d== nightly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;python包：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;astor                  0.8.1           &lt;br&gt;
backcall               0.2.0           &lt;br&gt;
beautifulsoup4         4.9.3           &lt;br&gt;
bids-validator         1.9.3           &lt;br&gt;
certifi                2020.6.20       &lt;br&gt;
cffi                   1.14.0          &lt;br&gt;
chardet                3.0.4           &lt;br&gt;
ci-info                0.2.0           &lt;br&gt;
click                  8.1.3           &lt;br&gt;
conda                  4.9.1           &lt;br&gt;
conda-build            3.20.5          &lt;br&gt;
conda-package-handling 1.7.0           &lt;br&gt;
cryptography           2.9.2           &lt;br&gt;
cycler                 0.11.0          &lt;br&gt;
dataclasses            0.6             &lt;br&gt;
decorator              4.4.2           &lt;br&gt;
dnspython              2.0.0           &lt;br&gt;
docopt                 0.6.2           &lt;br&gt;
etelemetry             0.3.0           &lt;br&gt;
filelock               3.0.12          &lt;br&gt;
fonttools              4.33.3          &lt;br&gt;
formulaic              0.3.4           &lt;br&gt;
future                 0.18.2          &lt;br&gt;
glob2                  0.7             &lt;br&gt;
idna                   2.9             &lt;br&gt;
interface-meta         1.3.0           &lt;br&gt;
ipython                7.18.1          &lt;br&gt;
ipython-genutils       0.2.0           &lt;br&gt;
isodate                0.6.1           &lt;br&gt;
jedi                   0.17.2          &lt;br&gt;
Jinja2                 2.11.2          &lt;br&gt;
joblib                 1.1.0           &lt;br&gt;
kiwisolver             1.4.2           &lt;br&gt;
libarchive-c           2.9             &lt;br&gt;
looseversion           1.0.1           &lt;br&gt;
lxml                   4.8.0           &lt;br&gt;
MarkupSafe             1.1.1           &lt;br&gt;
matplotlib             3.5.2           &lt;br&gt;
mkl-fft                1.2.0           &lt;br&gt;
mkl-random             1.1.1           &lt;br&gt;
mkl-service            2.3.0           &lt;br&gt;
networkx               2.8             &lt;br&gt;
&lt;strong&gt;nibabel&lt;/strong&gt;                3.2.2           &lt;br&gt;
&lt;strong&gt;nilearn&lt;/strong&gt;                0.9.1           &lt;br&gt;
&lt;strong&gt;nipype&lt;/strong&gt;                 1.8.1           &lt;br&gt;
num2words              0.5.10          &lt;br&gt;
numpy                  1.19.2          &lt;br&gt;
olefile                0.46            &lt;br&gt;
packaging              21.3            &lt;br&gt;
pandas                 1.4.2           &lt;br&gt;
parso                  0.7.0           &lt;br&gt;
pexpect                4.8.0           &lt;br&gt;
pickleshare            0.7.5           &lt;br&gt;
Pillow                 9.0.0           &lt;br&gt;
pip                    20.0.2          &lt;br&gt;
pkginfo                1.6.0           &lt;br&gt;
prompt-toolkit         3.0.8           &lt;br&gt;
prov                   2.0.0           &lt;br&gt;
psutil                 5.7.2           &lt;br&gt;
ptyprocess             0.6.0           &lt;br&gt;
&lt;strong&gt;pybids&lt;/strong&gt;                 0.15.1          &lt;br&gt;
pycosat                0.6.3           &lt;br&gt;
pycparser              2.20            &lt;br&gt;
pydot                  1.4.2           &lt;br&gt;
Pygments               2.7.1           &lt;br&gt;
pyOpenSSL              19.1.0          &lt;br&gt;
pyparsing              3.0.9           &lt;br&gt;
PySocks                1.7.1           &lt;br&gt;
python-dateutil        2.8.2           &lt;br&gt;
python-etcd            0.4.5           &lt;br&gt;
pytz                   2020.1          &lt;br&gt;
PyYAML                 5.3.1           &lt;br&gt;
rdflib                 6.1.1           &lt;br&gt;
requests               2.23.0          &lt;br&gt;
ruamel-yaml            0.15.87         &lt;br&gt;
&lt;strong&gt;scikit-learn&lt;/strong&gt;           1.1.0           &lt;br&gt;
scipy                  1.8.0           &lt;br&gt;
setuptools             46.4.0.post20200518
simplejson             3.17.6          &lt;br&gt;
six                    1.14.0          &lt;br&gt;
soupsieve              2.0.1           &lt;br&gt;
SQLAlchemy             1.3.24          &lt;br&gt;
threadpoolctl          3.1.0           &lt;br&gt;
&lt;strong&gt;torch&lt;/strong&gt;                  1.7.0           &lt;br&gt;
torchelastic           0.2.1           &lt;br&gt;
torchvision            0.8.0           &lt;br&gt;
tqdm                   4.46.0          &lt;br&gt;
traitlets              5.0.5           &lt;br&gt;
traits                 6.3.2           &lt;br&gt;
typing-extensions      3.7.4.3         &lt;br&gt;
urllib3                1.25.8          &lt;br&gt;
wcwidth                0.2.5           &lt;br&gt;
wheel                  0.34.2          &lt;br&gt;
wrapt                  1.14.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;彩蛋&#34;&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;该镜像已内置ssh-server服务，可直接利用vscode实现远程镜像开发和调试&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动容器，指定端口（如8088）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --gpus all -it --rm -p 8088:22 mindsgo-sz-docker.pkg.coding.net/neuroimage_analysis/base/msg_baseimage_cuda11:v1.1
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在容器console中启动ssh服务：&lt;code&gt;/etc/init.d/ssh restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在VScode中的remote config文件新增Host， 添加对应IP、用户名、端口即可（&lt;a href=&#34;https://chenfei-ye.github.io/post/202206_dockerfile_all/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点此参考具体细节&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;容器的管理员密码：&lt;code&gt;mindsgo123&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>CUDA版本、显卡算力、Pytorch对应关系</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_cuda_pytorch/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_cuda_pytorch/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;试用合作医院提供的堡垒机服务器，自带的NVIDIA-A6000显卡不支持结构像自动分割的pipeline镜像，运行时报错capability sm_86 is not compatible。发现是由于显卡的架构比较新，旧版pytorch库不支持。同时根据输出可以看到 The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_70 sm_75当前pytorch只能支持上面几种（显卡算力）架构。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;把基础镜像直接更新到&lt;code&gt;pytorch/pytorch:1.7.0-cuda11.0-cudnn8-runtime&lt;/code&gt;，解决。
NOTE: CUDA10.x最高支持算力7.x; CUDA11.0最高支持算力8.x&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://imgpp.com/s1/2022/06/12/cuda_version.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://imgpp.com/s1/2022/06/12/torch_version.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>神经纤维格式转换：tck转trk</title>
      <link>https://chenfei-ye.github.io/zh/post/202206_tck2trk/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202206_tck2trk/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MRtrix3&lt;/code&gt;输出的tck神经纤维文件，需要转换成&lt;code&gt;TrackVis&lt;/code&gt;能识别的trk格式&lt;/p&gt;
&lt;h2 id=&#34;python实现&#34;&gt;Python实现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python

import json
import nibabel as nib
from nibabel.streamlines import Field
from nibabel.orientations import aff2axcodes


def main():

    tck_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.tck&amp;#39;
    anatomy_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/bundle_segmentations/CC.nii.gz&amp;#39;
    trk_file = &amp;#39;/home/amax/data/cye/TractSeg_testcase/KAIPU-mating/dwi_recon_output/fiber_tracts/Fibers/CC.trk&amp;#39;

    nii = nib.load(anatomy_file)

    header = {}
    header[Field.VOXEL_TO_RASMM] = nii.affine.copy()
    header[Field.VOXEL_SIZES] = nii.header.get_zooms()[:3]
    header[Field.DIMENSIONS] = nii.shape[:3]
    header[Field.VOXEL_ORDER] = &amp;#34;&amp;#34;.join(aff2axcodes(nii.affine))

    tck = nib.streamlines.load(tck_file)
    nib.streamlines.save(tck.tractogram, trk_file, header=header)

        
if __name__ == &amp;#39;__main__&amp;#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R常见统计模型使用</title>
      <link>https://chenfei-ye.github.io/zh/post/202205_r_statistics/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      <guid>https://chenfei-ye.github.io/zh/post/202205_r_statistics/</guid>
      <description>&lt;p&gt;数据描述：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;summary(A) psych::describe(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直方图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hist(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;概率密度图density plot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hist(A,prob=TRUE) lines(density(A, bw=&amp;quot;SJ&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;累计分布图CDF：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot(ecdf(A), do.points=FALSE, verticals=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拟合同参数高斯分布的CDF：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lines(x, pnorm(x, mean=mean(A), sd=sqrt(var(A))), lty=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;双样本检验&lt;/p&gt;
&lt;p&gt;经典的two-sample t-test：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t.test(A, B, var.equal=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不满足同方差，则用 Welch modified two-sample t-test :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res=t.test(A, B) res$p.val
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检验同方差的方法可用F-test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var.test(A, B)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不满足正态性，则用非参数检验，即two-sample Mann-Whitney test:（但是仍然assume两个分布是相似的）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wilcox.test(A, B)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果连分布也很不相似，则考虑用permutation test&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;coin::independence_test(Length ~ Hand, data = Data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是否满足正态分布，有三种方法检验：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;QQ图：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    par(pty=&amp;#34;s&amp;#34;) # arrange for a square figure region qqnorm(long) qqline(long)
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Shapiro-Wilk test：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    shapiro.test(A) # Shapiro-Wilk normality test
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Kolmogorov-Smirnov test：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    ks.test(A, &amp;#34;pnorm&amp;#34;, mean = mean(A), sd = sqrt(var(A)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;独立性检验：&lt;/p&gt;
&lt;p&gt;卡方分布有一个重要应用就是根据样本数据来检验两个分类变量的独立性，我们以CO2数据为例来说明chisq.test函数的使用，help(CO2)可以了解更多信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;data(CO2) #读入内置的数据包，其中Type和Treatmen是其中两个分类变量。 
chisq.test(table(CO2$Type,CO2$Treatment)) #检验这两个因子之间是否独立
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果显示P值为0.82，因此可以认为两因子之间独立。在样本较小的情况下，还可以使用fisher精确检验，对应的函数是&lt;code&gt;fisher.test&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proportion test&lt;/code&gt;:(在两个group的情况下，结果和卡方检验是一样的)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;library(MASS) 
table(quine$Eth, quine$Sex) 
prop.test(table(quine$Eth, quine$Sex), correct=FALSE)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ANOVA：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;anova(lm(y~x)) 
summary(aov(y~x)) # summary(aov(lm(y~x)))也是一样的结果 
summary(aov(y~x+covariate)) # ANCOVA 
summary(test)[[1]][[&amp;#34;Pr(&amp;gt;F)&amp;#34;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Post-hoc:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TukeyHSD(aov(y ~ x, data))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于ANCOVA的post hoc:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TukeyHSD(aov(y ~ x+covariate, data),which=&amp;#39;x&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果ANOVA不满足正态性，用Kruskal-Wallis非参数检验：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kruskal.test(y~x, data = df) # post-hoc for Kruskal-Wallis Test： Steel-Dwass test library(FSA) dunnTest(y~x, data=df, method=&amp;#34;bonferroni&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;多重比较校正：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ps &amp;lt;- runif(20, max=.2) 
def &amp;lt;- p.adjust(ps) 
bon &amp;lt;- p.adjust(ps, method=&amp;#34;bonferroni&amp;#34;) 
bh &amp;lt;- p.adjust(ps, method=&amp;#34;BH&amp;#34;) #Benjamini, Hochberg (1995) default fdr 
by &amp;lt;- p.adjust(ps, method=&amp;#34;BY&amp;#34;) #Benjamini, Yekutieli (2001) another fdr 
x = matrix(rnorm(10000*5),nrow=10000) 
y = matrix(rnorm(10000*5),nrow=10000) 
p = sapply(1:10000, function(i) t.test(x[i,],y[i,])$p.val) 
q = p.adjust(p, method = &amp;#34;fdr&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
